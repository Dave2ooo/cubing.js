{"version":3,"file":"index-d131b140.js","sources":["../../src/bluetooth/transformer.ts","../../src/bluetooth/bluetooth-puzzle.ts","../../src/bluetooth/debug.ts","../../src/bluetooth/unsafe-raw-aes.ts","../../src/bluetooth/gan.ts","../../src/bluetooth/giiker.ts","../../src/bluetooth/gocube.ts","../../src/bluetooth/keyboard.ts","../../src/bluetooth/connect.ts"],"sourcesContent":["import { Quaternion, Vector3 } from \"three\";\nimport { MoveEvent, OrientationEvent } from \"./bluetooth-puzzle\";\n\n// TODO: Combine orientation and moves into a single event to handle quaternion remapping.\nexport interface StreamTransformer {\n  // Modifies the input.\n  transformMove(moveEvent: MoveEvent): void;\n\n  // Modifies the input.\n  transformOrientation(orientationEvent: OrientationEvent): void;\n}\n\nfunction maxAxis(v: Vector3): string {\n  const maxVal = Math.max(Math.abs(v.x), Math.abs(v.y), Math.abs(v.z));\n  switch (maxVal) {\n    case v.x:\n      return \"x\";\n    case -v.x:\n      return \"-x\";\n    case v.y:\n      return \"y\";\n    case -v.y:\n      return \"-y\";\n    case v.z:\n      return \"z\";\n    case -v.z:\n      return \"-z\";\n    default:\n      throw new Error(\"Uh-oh.\");\n  }\n}\n\nconst s2 = Math.sqrt(0.5);\n\nconst m: { [s: string]: Quaternion } = {\n  \"y z\": new Quaternion(0, 0, 0, 1),\n  \"-z y\": new Quaternion(s2, 0, 0, s2),\n  \"x z\": new Quaternion(0, 0, -s2, s2),\n  \"-x z\": new Quaternion(0, 0, s2, s2),\n};\n\nexport class BasicRotationTransformer implements StreamTransformer {\n  // private reorientQuat = new Quaternion();\n\n  public transformMove(moveEvent: MoveEvent): void {\n    // Nothing to do.\n  }\n  public transformOrientation(orientationEvent: OrientationEvent): void {\n    const { x, y, z, w } = orientationEvent.quaternion;\n    const quat = new Quaternion(x, y, z, w);\n\n    const U = new Vector3(0, 1, 0);\n    const F = new Vector3(0, 0, 1);\n    const maxU = maxAxis(U.applyQuaternion(quat));\n    const maxF = maxAxis(F.applyQuaternion(quat));\n\n    const oriQuat = m[`${maxU} ${maxF}`] || m[\"y z\"];\n\n    console.log(quat);\n    console.log(oriQuat);\n    const q2 = quat.premultiply(oriQuat);\n\n    // console.log(maxAxis(U.applyQuaternion(quat)), maxAxis(F.applyQuaternion(quat)));\n    console.log(q2);\n\n    orientationEvent.quaternion = {\n      x: q2.x,\n      y: q2.y,\n      z: q2.z,\n      w: q2.w,\n    };\n\n    console.log(orientationEvent.quaternion);\n  }\n}\n","import { BlockMove } from \"../alg\";\nimport { Transformation } from \"../kpuzzle\";\nimport { BasicRotationTransformer, StreamTransformer } from \"./transformer\";\n\n/******** BluetoothPuzzle ********/\n\n// TODO: Make compatible with Twisty.\nexport type PuzzleState = Transformation;\n\n// TODO: Use actual `CustomEvent`s?\n// https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent\nexport class MoveEvent {\n  public latestMove: BlockMove;\n  public timeStamp: number;\n  public debug?: object;\n  public state?: PuzzleState;\n  public quaternion?: any; // TODO: Unused\n}\n\n// TODO: Only use the `quaternion` field in the `MoveEvent`?\nexport class OrientationEvent {\n  public quaternion: { x: number, y: number, z: number, w: number };\n  public timeStamp: number;\n  public debug?: object;\n}\n\nexport interface BluetoothConfig {\n  filters: BluetoothRequestDeviceFilter[];\n  optionalServices: BluetoothServiceUUID[];\n}\n\n// TODO: Expose device name (and/or globally unique identifier)?\nexport abstract class BluetoothPuzzle {\n  public transformers: StreamTransformer[] = [];\n  protected listeners: Array<(e: MoveEvent) => void> = []; // TODO: type\n  protected orientationListeners: Array<(e: OrientationEvent) => void> = []; // TODO: type\n\n  public abstract name(): string | undefined;\n\n  // TODO: require subclasses to implement this?\n  public async getState(): Promise<PuzzleState> {\n    throw new Error(\"cannot get state\");\n  }\n\n  public addMoveListener(listener: (e: MoveEvent) => void): void {\n    this.listeners.push(listener);\n  }\n\n  public addOrientationListener(listener: (e: OrientationEvent) => void): void {\n    this.orientationListeners.push(listener);\n  }\n\n  public experimentalAddBasicRotationTransformer(): void {\n    this.transformers.push(new BasicRotationTransformer());\n  }\n\n  protected dispatchMove(moveEvent: MoveEvent): void {\n    for (const transformer of this.transformers) {\n      transformer.transformMove(moveEvent);\n    }\n    for (const l of this.listeners) {\n      l(moveEvent);\n    }\n  }\n\n  protected dispatchOrientation(orientationEvent: OrientationEvent): void {\n    for (const transformer of this.transformers) {\n      transformer.transformOrientation(orientationEvent);\n    }\n    for (const l of this.orientationListeners) {\n      // TODO: Convert quaternion.\n      l(orientationEvent);\n    }\n  }\n\n}\n","let DEBUG_LOGGING_ENABLED = true;\n\nexport function enableDebugLogging(enable: boolean): void {\n  DEBUG_LOGGING_ENABLED = enable;\n}\n\nexport function debugLog(...args: any[]): void {\n  if (!DEBUG_LOGGING_ENABLED) {\n    return;\n  }\n\n  if (console.info) {\n    console.info.apply(console, args);\n  } else {\n    console.log.apply(console, args);\n  }\n}\n","const blockSize = 16;\nconst zeros = new Uint8Array(blockSize);\nconst paddingBlockPlaintext = new Uint8Array(new Array(blockSize).fill(blockSize));\nconst AES_CBC = \"AES-CBC\";\n\nexport async function importKey(keyBytes: ArrayBuffer): Promise<CryptoKey> {\n  return await crypto.subtle.importKey(\n    \"raw\",\n    keyBytes,\n    AES_CBC,\n    true,\n    [\"encrypt\", \"decrypt\"],\n  );\n}\n\nasync function unsafeEncryptBlockWithIV(key: CryptoKey, plaintextBlock: ArrayBuffer, iv: ArrayBuffer): Promise<ArrayBuffer> {\n  return (await window.crypto.subtle.encrypt(\n    {\n      name: AES_CBC,\n      iv,\n    },\n    key,\n    plaintextBlock,\n  )).slice(0, blockSize);\n}\n\nexport async function unsafeEncryptBlock(key: CryptoKey, plaintextBlock: ArrayBuffer): Promise<ArrayBuffer> {\n  return (await unsafeEncryptBlockWithIV(key, plaintextBlock, zeros)).slice(0, blockSize);\n}\n\nexport async function unsafeDecryptBlock(key: CryptoKey, ciphertextBlock: ArrayBuffer): Promise<ArrayBuffer> {\n  const paddingBlock = await unsafeEncryptBlockWithIV(\n    key,\n    paddingBlockPlaintext,\n    ciphertextBlock,\n  );\n\n  const cbcCiphertext = new Uint8Array(2 * blockSize);\n  cbcCiphertext.set(new Uint8Array(ciphertextBlock), 0);\n  cbcCiphertext.set(new Uint8Array(paddingBlock), blockSize);\n\n  return (await window.crypto.subtle.decrypt(\n    {\n      name: AES_CBC,\n      iv: zeros,\n    },\n    key,\n    cbcCiphertext,\n  )).slice(0, blockSize);\n}\n","/* tslint:disable no-bitwise */\n\nimport { Quaternion } from \"three\";\nimport { BareBlockMove, BlockMove } from \"../alg\";\nimport { KPuzzle, Puzzles } from \"../kpuzzle\";\nimport { BluetoothConfig, BluetoothPuzzle, PuzzleState } from \"./bluetooth-puzzle\";\nimport { debugLog } from \"./debug\";\nimport { importKey, unsafeDecryptBlock } from \"./unsafe-raw-aes\";\n\n// This needs to be short enough to capture 6 moves (OBQTM).\nconst DEFAULT_INTERVAL_MS = 150;\n// Number of latest moves provided by the Gan 356i.\nconst MAX_LATEST_MOVES = 6;\n\nconst ganMoveToBlockMove: { [i: number]: BlockMove } = {\n  0x00: BareBlockMove(\"U\"),\n  0x02: BareBlockMove(\"U\", -1),\n  0x03: BareBlockMove(\"R\"),\n  0x05: BareBlockMove(\"R\", -1),\n  0x06: BareBlockMove(\"F\"),\n  0x08: BareBlockMove(\"F\", -1),\n  0x09: BareBlockMove(\"D\"),\n  0x0b: BareBlockMove(\"D\", -1),\n  0x0c: BareBlockMove(\"L\"),\n  0x0e: BareBlockMove(\"L\", -1),\n  0x0f: BareBlockMove(\"B\"),\n  0x11: BareBlockMove(\"B\", -1),\n};\n\nlet homeQuatInverse: Quaternion | null = null;\n\nlet swap = (x: number, y: number, z: number) => {\n  return [-y, z, -x];\n};\n\n(window as any).setSwap = (fn: any) => {\n  swap = fn;\n  homeQuatInverse = null;\n};\n\nfunction probablyDecodedCorrectly(data: Uint8Array): boolean {\n  return data[13] < 0x12 && data[14] < 0x12 && data[15] < 0x12 && data[16] < 0x12 && data[17] < 0x12 && data[18] < 0x12;\n}\n\nconst key10 = new Uint8Array([198, 202, 21, 223, 79, 110, 19, 182, 119, 13, 230, 89, 58, 175, 186, 162]);\nconst key11 = new Uint8Array([67, 226, 91, 214, 125, 220, 120, 216, 7, 96, 163, 218, 130, 60, 1, 241]);\n\n// Clean-room reverse-engineered\nasync function decryptState(data: Uint8Array, key: Uint8Array, macAddress: Uint8Array): Promise<Uint8Array> {\n  // TODO: Read from puzzle.\n  const keyBuffer = new Uint8Array(key10);\n  for (let i = 0; i < macAddress.length; i++) {\n    keyBuffer[i] = (keyBuffer[i] + macAddress[i]) % 256;\n  }\n\n  const aesKey = await importKey(new Uint8Array(keyBuffer));\n  data.set(new Uint8Array(await unsafeDecryptBlock(aesKey, data.slice(3))), 3);\n  data.set(new Uint8Array(await unsafeDecryptBlock(aesKey, data.slice(0, 16))), 0);\n  return data;\n}\n\n// TODO: Support caching which decoding strategy worked last time.\nasync function decodeState(data: Uint8Array, macAddress: Uint8Array): Promise<Uint8Array> {\n  if (probablyDecodedCorrectly(data)) {\n    return data;\n  }\n  const decrypted10 = await decryptState(data, key10, macAddress);\n  if (probablyDecodedCorrectly(decrypted10)) {\n    return decrypted10;\n  }\n  const decrypted11 = await decryptState(data, key11, macAddress);\n  if (probablyDecodedCorrectly(decrypted11)) {\n    return decrypted11;\n  }\n  throw new Error(\"Unable to decode\");\n}\n\nclass PhysicalState {\n\n  public static async read(characteristic: BluetoothRemoteGATTCharacteristic, macAddress: Uint8Array): Promise<PhysicalState> {\n    const value = await decodeState(new Uint8Array((await characteristic.readValue()).buffer), macAddress);\n    const timeStamp = Date.now();\n    return new PhysicalState(new DataView(value.buffer), timeStamp);\n  }\n  private arr: Uint8Array;\n  private arrLen = 19;\n  private constructor(private dataView: DataView, public timeStamp: number) {\n    this.arr = new Uint8Array(dataView.buffer);\n    if (this.arr.length !== this.arrLen) {\n      throw new Error(\"Unexpected array length\");\n    }\n  }\n\n  public rotQuat(): Quaternion {\n    let x = this.dataView.getInt16(0, true) / 16384;\n    let y = this.dataView.getInt16(2, true) / 16384;\n    let z = this.dataView.getInt16(4, true) / 16384;\n    [x, y, z] = swap(x, y, z);\n    const wSquared = 1 - (x * x + y * y + z * z);\n    const w = wSquared > 0 ? Math.sqrt(wSquared) : 0;\n    const quat = new Quaternion(x, y, z, w);\n\n    if (!homeQuatInverse) {\n      homeQuatInverse = quat.clone().inverse();\n    }\n\n    return quat.clone().multiply(homeQuatInverse!.clone());\n  }\n\n  // Loops from 255 to 0.\n  public moveCounter(): number {\n    return this.arr[12];\n  }\n\n  public numMovesSince(previousMoveCounter: number): number {\n    return (this.moveCounter() - previousMoveCounter) & 0xff;\n  }\n\n  // Due to the design of the Gan356i protocol, it's common to query for the\n  // latest physical state and find 0 moves have been performed since the last\n  // query. Therefore, it's useful to allow 0 as an argument.\n  public latestMoves(n: number): BlockMove[] {\n    if (n < 0 || n > MAX_LATEST_MOVES) {\n      throw new Error(`Must ask for 0 to 6 latest moves. (Asked for ${n})`);\n    }\n    return Array.from(this.arr.slice(19 - n, 19)).map((i) => ganMoveToBlockMove[i]);\n  }\n\n  public debugInfo(): { arr: Uint8Array } {\n    return {\n      arr: this.arr,\n    };\n  }\n}\n\n// TODO: Short IDs\nconst UUIDs = {\n  ganCubeService: \"0000fff0-0000-1000-8000-00805f9b34fb\",\n  physicalStateCharacteristic: \"0000fff5-0000-1000-8000-00805f9b34fb\",\n  actualAngleAndBatteryCharacteristic: \"0000fff7-0000-1000-8000-00805f9b34fb\",\n  faceletStatus1Characteristic: \"0000fff2-0000-1000-8000-00805f9b34fb\",\n  faceletStatus2Characteristic: \"0000fff3-0000-1000-8000-00805f9b34fb\",\n};\n\nconst commands: { [cmd: string]: BufferSource } = {\n  reset: new Uint8Array([0x00, 0x00, 0x24, 0x00, 0x49, 0x92, 0x24, 0x49, 0x6d, 0x92, 0xdb, 0xb6, 0x49, 0x92, 0xb6, 0x24, 0x6d, 0xdb]),\n};\n\n// // TODO: Move this into a factory?\nexport const ganConfig: BluetoothConfig = {\n  filters: [\n    { namePrefix: \"GAN\" },\n  ],\n  optionalServices: [\n    UUIDs.ganCubeService,\n  ],\n};\n\nfunction buf2hex(buffer: ArrayBuffer): string { // buffer is an ArrayBuffer\n  return Array.prototype.map.call(new Uint8Array(buffer), (x: number) => (\"00\" + x.toString(16)).slice(-2)).join(\" \");\n}\n\nconst reidEdgeOrder = \"UF UR UB UL DF DR DB DL FR FL BR BL\".split(\" \");\nconst reidCornerOrder = \"UFR URB UBL ULF DRF DFL DLB DBR\".split(\" \");\n\ninterface PieceInfo {\n  piece: number;\n  orientation: number;\n}\n\nfunction rotateLeft(s: string, i: number): string {\n  return s.slice(i) + s.slice(0, i);\n}\n\nconst pieceMap: { [s: string]: PieceInfo } = {};\n// TODO: Condense the for loops.\nreidEdgeOrder.forEach((edge, idx) => {\n  for (let i = 0; i < 2; i++) {\n    pieceMap[rotateLeft(edge, i)] = { piece: idx, orientation: i };\n  }\n});\nreidCornerOrder.forEach((corner, idx) => {\n  for (let i = 0; i < 3; i++) {\n    pieceMap[rotateLeft(corner, i)] = { piece: idx, orientation: i };\n  }\n});\n\nconst gan356iCornerMappings = [\n  [0, 21, 15], [5, 13, 47], [7, 45, 39], [2, 37, 23],\n  [29, 10, 16], [31, 18, 32], [26, 34, 40], [24, 42, 8],\n];\n\nconst gan356iEdgeMappings = [\n  [1, 22], [3, 14], [6, 46], [4, 38],\n  [30, 17], [27, 9], [25, 41], [28, 33],\n  [19, 12], [20, 35], [44, 11], [43, 36],\n];\nconst faceOrder = \"URFDLB\";\n\n// TODO\n// class CharacteristicGetter {\n//   characteristics: {[s: string]: Promise<BluetoothRemoteGATTCharacteristic> | null}\n//   constructor(private service: BluetoothRemoteGATTService) {\n//   }\n\n//   // get()\n// }\n\nfunction getMacAddress(name: string): Uint8Array {\n  const macAddress = new Uint8Array([0x4c, 0x24, 0x98, 0x00, 0x00, 0x00]);\n  if (name.length !== 10 || !name.startsWith(\"GAN-\")) {\n    console.warn(\"Unexpected puzzle name.\");\n  }\n  macAddress[3] = parseInt(name.slice(4, 6), 16);\n  macAddress[4] = parseInt(name.slice(6, 8), 16);\n  macAddress[5] = parseInt(name.slice(8, 10), 16);\n  return macAddress;\n}\n\nexport class GanCube extends BluetoothPuzzle {\n  // We have to perform async operations before we call the constructor.\n  public static async connect(server: BluetoothRemoteGATTServer): Promise<GanCube> {\n    const macAddress = getMacAddress(server.device!.name!);\n\n    const ganCubeService = await server.getPrimaryService(UUIDs.ganCubeService);\n    debugLog(\"Service:\", ganCubeService);\n\n    const physicalStateCharacteristic = await ganCubeService.getCharacteristic(UUIDs.physicalStateCharacteristic);\n    debugLog(\"Characteristic:\", physicalStateCharacteristic);\n\n    const initialMoveCounter = (await PhysicalState.read(physicalStateCharacteristic, macAddress)).moveCounter();\n    debugLog(\"Initial Move Counter:\", initialMoveCounter);\n    const cube = new GanCube(ganCubeService, server, physicalStateCharacteristic, initialMoveCounter, macAddress);\n    return cube;\n  }\n\n  public INTERVAL_MS: number = DEFAULT_INTERVAL_MS;\n  private intervalHandle: number | null = null;\n  private kpuzzle: KPuzzle = new KPuzzle(Puzzles[\"3x3x3\"]);\n  private cachedFaceletStatus1Characteristic: Promise<BluetoothRemoteGATTCharacteristic>;\n  private cachedFaceletStatus2Characteristic: Promise<BluetoothRemoteGATTCharacteristic>;\n  private cachedActualAngleAndBatteryCharacteristic: Promise<BluetoothRemoteGATTCharacteristic>;\n  private constructor(private service: BluetoothRemoteGATTService, private server: BluetoothRemoteGATTServer, private physicalStateCharacteristic: BluetoothRemoteGATTCharacteristic, private lastMoveCounter: number, private macAddress: Uint8Array) {\n    super();\n    this.startTrackingMoves();\n  }\n\n  public name(): string | undefined {\n    return this.server.device.name;\n  }\n\n  public startTrackingMoves(): void {\n    // `window.setInterval` instead of `setInterval`:\n    // https://github.com/Microsoft/TypeScript/issues/842#issuecomment-252445883\n    this.intervalHandle = window.setInterval(this.intervalHandler.bind(this), this.INTERVAL_MS);\n  }\n\n  public stopTrackingMoves(): void {\n    if (!this.intervalHandle) {\n      throw new Error(\"Not tracking moves!\");\n    }\n    clearInterval(this.intervalHandle);\n    this.intervalHandle = null;\n  }\n\n  // TODO: Can we ever receive async responses out of order?\n  public async intervalHandler(): Promise<void> {\n    const physicalState = await PhysicalState.read(this.physicalStateCharacteristic, this.macAddress);\n    let numInterveningMoves = physicalState.numMovesSince(this.lastMoveCounter);\n    // console.log(numInterveningMoves);\n    if (numInterveningMoves > MAX_LATEST_MOVES) {\n      debugLog(`Too many moves! Dropping ${numInterveningMoves - MAX_LATEST_MOVES} moves`);\n      numInterveningMoves = MAX_LATEST_MOVES;\n    }\n    for (const move of physicalState.latestMoves(numInterveningMoves)) {\n      // console.log(move);\n      this.kpuzzle.applyBlockMove(move);\n      this.dispatchMove({\n        latestMove: move,\n        timeStamp: physicalState.timeStamp,\n        debug: physicalState.debugInfo(),\n        state: this.kpuzzle.state,\n        // quaternion: physicalState.rotQuat(),\n      });\n    }\n    const { x, y, z, w } = physicalState.rotQuat();\n    this.dispatchOrientation({\n      timeStamp: physicalState.timeStamp,\n      quaternion: { x, y, z, w },\n    });\n    this.lastMoveCounter = physicalState.moveCounter();\n  }\n\n  public async getBattery(): Promise<number> {\n    return new Uint8Array(await this.readActualAngleAndBatteryCharacteristic())[7];\n  }\n\n  public async getState(): Promise<PuzzleState> {\n    const arr: Uint8Array = await decodeState(new Uint8Array((await this.readFaceletStatus1Characteristic())), this.macAddress);\n    const stickers: number[] = [];\n    for (let i = 0; i < 18; i += 3) {\n      let v = (((arr[i ^ 1] << 8) + arr[(i + 1) ^ 1]) << 8) + arr[(i + 2) ^ 1];\n      for (let j = 0; j < 8; j++) {\n        stickers.push(v & 7);\n        v >>= 3;\n      }\n    }\n\n    const state: PuzzleState = {\n      CORNER: {\n        permutation: [],\n        orientation: [],\n      },\n      EDGE: {\n        permutation: [],\n        orientation: [],\n      },\n      CENTER: {\n        permutation: [0, 1, 2, 3, 4, 5],\n        orientation: [0, 0, 0, 0, 0, 0],\n      },\n    };\n\n    for (const cornerMapping of gan356iCornerMappings) {\n      const pieceInfo: PieceInfo = pieceMap[cornerMapping.map((i) => faceOrder[stickers[i]]).join(\"\")];\n      state.CORNER.permutation.push(pieceInfo.piece);\n      state.CORNER.orientation.push(pieceInfo.orientation);\n    }\n\n    for (const edgeMapping of gan356iEdgeMappings) {\n      const pieceInfo: PieceInfo = pieceMap[edgeMapping.map((i) => faceOrder[stickers[i]]).join(\"\")];\n      state.EDGE.permutation.push(pieceInfo.piece);\n      state.EDGE.orientation.push(pieceInfo.orientation);\n    }\n\n    return state;\n  }\n\n  public async faceletStatus1Characteristic(): Promise<BluetoothRemoteGATTCharacteristic> {\n    this.cachedFaceletStatus1Characteristic = this.cachedFaceletStatus1Characteristic || this.service.getCharacteristic(UUIDs.faceletStatus1Characteristic);\n    return this.cachedFaceletStatus1Characteristic;\n  }\n\n  public async faceletStatus2Characteristic(): Promise<BluetoothRemoteGATTCharacteristic> {\n    this.cachedFaceletStatus2Characteristic = this.cachedFaceletStatus2Characteristic || this.service.getCharacteristic(UUIDs.faceletStatus2Characteristic);\n    return this.cachedFaceletStatus2Characteristic;\n  }\n\n  public async actualAngleAndBatteryCharacteristic(): Promise<BluetoothRemoteGATTCharacteristic> {\n    this.cachedActualAngleAndBatteryCharacteristic = this.cachedActualAngleAndBatteryCharacteristic || this.service.getCharacteristic(UUIDs.actualAngleAndBatteryCharacteristic);\n    return this.cachedActualAngleAndBatteryCharacteristic;\n  }\n\n  public async reset(): Promise<void> {\n    const faceletStatus1Characteristic = await this.faceletStatus1Characteristic();\n    await faceletStatus1Characteristic.writeValue(commands.reset);\n  }\n\n  public async readFaceletStatus1Characteristic(): Promise<ArrayBuffer> {\n    const faceletStatus1Characteristic = await this.faceletStatus1Characteristic();\n    return (await faceletStatus1Characteristic.readValue()).buffer;\n  }\n\n  public async readFaceletStatus2Characteristic(): Promise<string> {\n    const faceletStatus2Characteristic = await this.faceletStatus2Characteristic();\n    return buf2hex((await faceletStatus2Characteristic.readValue()).buffer);\n  }\n\n  public async readActualAngleAndBatteryCharacteristic(): Promise<ArrayBuffer> {\n    const actualAngleAndBatteryCharacteristic = await this.actualAngleAndBatteryCharacteristic();\n    return (await actualAngleAndBatteryCharacteristic.readValue()).buffer;\n  }\n\n  // TODO\n  // private onphysicalStateCharacteristicChanged(event: any): void {\n  //   var val = event.target.value;\n  //   debugLog(val);\n  // }\n}\n","/* tslint:disable no-bitwise */\n\nimport { BareBlockMove, BlockMove } from \"../alg\";\nimport { Transformation } from \"../kpuzzle\";\nimport { BluetoothConfig, BluetoothPuzzle, PuzzleState } from \"./bluetooth-puzzle\";\nimport { debugLog } from \"./debug\";\n\nconst MESSAGE_LENGTH = 20;\n\nconst UUIDs = {\n  cubeService: \"0000aadb-0000-1000-8000-00805f9b34fb\",\n  cubeCharacteristic: \"0000aadc-0000-1000-8000-00805f9b34fb\",\n};\n\n// TODO: Move this into a factory?\nexport const giiKERConfig: BluetoothConfig = {\n  filters: [\n    // Known prefixes: GiC, GiS (3x3x3), Gi2 (2x2x2)\n    // Suspected prefixes GiY, Gi3\n    { namePrefix: \"Gi\" },\n    { services: [\"0000aadb-0000-1000-8000-00805f9b34fb\"] },\n    { services: [\"0000aaaa-0000-1000-8000-00805f9b34fb\"] },\n    { services: [\"0000fe95-0000-1000-8000-00805f9b34fb\"] },\n  ],\n  optionalServices: [\n    // \"00001530-1212-efde-1523-785feabcd123\",\n    // \"0000aaaa-0000-1000-8000-00805f9b34fb\",\n    UUIDs.cubeService,\n    // \"0000180f-0000-1000-8000-00805f9b34fb\",\n    // \"0000180a-0000-1000-8000-00805f9b34fb\"\n  ],\n};\n\n// TODO: Expose for testing.\nfunction giikerMoveToBlockMove(face: number, amount: number): BlockMove {\n  if (amount === 9) {\n    debugLog(\"Encountered 9\", face, amount);\n    amount = 2;\n  }\n  amount = [0, 1, 2, -1][amount];\n\n  const family = [\"?\", \"B\", \"D\", \"L\", \"U\", \"R\", \"F\"][face];\n  return BareBlockMove(family, amount);\n}\n\nexport { giikerMoveToBlockMove as giikerMoveToBlockMoveForTesting };\n\nfunction giikerStateStr(giikerState: number[]): string {\n  let str = \"\";\n  str += giikerState.slice(0, 8).join(\".\");\n  str += \"\\n\";\n  str += giikerState.slice(8, 16).join(\".\");\n  str += \"\\n\";\n  str += giikerState.slice(16, 28).join(\".\");\n  str += \"\\n\";\n  str += giikerState.slice(28, 32).join(\".\");\n  str += \"\\n\";\n  str += giikerState.slice(32, 40).join(\".\");\n  return str;\n}\n\n// TODO\n// const Reid333Orbits = {\n//   \"EDGE\":   {\"numPieces\": 12, \"orientations\": 2},\n//   \"CORNER\": {\"numPieces\": 8,  \"orientations\": 3},\n//   \"CENTER\": {\"numPieces\": 6,  \"orientations\": 4}\n// };\n\nconst Reid333SolvedCenters = {\n  permutation: [0, 1, 2, 3, 4, 5],\n  orientation: [0, 0, 0, 0, 0, 0],\n};\n\nconst epGiiKERtoReid333: number[] = [4, 8, 0, 9, 5, 1, 3, 7, 6, 10, 2, 11];\nconst epReid333toGiiKER: number[] = [2, 5, 10, 6, 0, 4, 8, 7, 1, 3, 9, 11];\n\nconst preEO: number[] = [1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0];\nconst postEO: number[] = [1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0];\n\nconst cpGiiKERtoReid333: number[] = [4, 0, 3, 5, 7, 1, 2, 6];\nconst cpReid333toGiiKER: number[] = [1, 5, 6, 2, 0, 3, 7, 4];\n\nconst preCO: number[] = [1, 2, 1, 2, 2, 1, 2, 1];\nconst postCO: number[] = [2, 1, 2, 1, 1, 2, 1, 2];\n\nconst coFlip: number[] = [-1, 1, -1, 1, 1, -1, 1, -1];\n\nfunction getNibble(val: Uint8Array, i: number): number {\n  if (i % 2 === 1) {\n    return val[(i / 2) | 0] % 16;\n  }\n  return 0 | (val[(i / 2) | 0] / 16);\n}\n\nfunction probablyEncrypted(data: Uint8Array): boolean {\n  return data[18] === 0xa7;\n}\n\nconst lookup = [176, 81, 104, 224, 86, 137, 237, 119, 38, 26, 193, 161, 210, 126, 150, 81, 93, 13, 236, 249, 89, 235, 88, 24, 113, 81, 214, 131, 130, 199, 2, 169, 39, 165, 171, 41];\n\nfunction decryptState(data: Uint8Array): Uint8Array {\n  const offset1 = getNibble(data, 38);\n  const offset2 = getNibble(data, 39);\n  const output = new Uint8Array(MESSAGE_LENGTH);\n  for (let i = 0; i < MESSAGE_LENGTH; i++) {\n    output[i] = data[i] + lookup[offset1 + i] + lookup[offset2 + i];\n  }\n  return output;\n}\n\n// TODO: Support caching which decoding strategy worked last time.\nasync function decodeState(data: Uint8Array): Promise<Uint8Array> {\n  if (!probablyEncrypted(data)) {\n    return data;\n  }\n  return await decryptState(data);\n  // TODO: Check that the decrypted state is a valid staet.\n}\n\nexport class GiiKERCube extends BluetoothPuzzle {\n\n  public static async connect(server: BluetoothRemoteGATTServer): Promise<GiiKERCube> {\n\n    const cubeService = await server.getPrimaryService(UUIDs.cubeService);\n    debugLog(\"Service:\", cubeService);\n\n    const cubeCharacteristic = await cubeService.getCharacteristic(UUIDs.cubeCharacteristic);\n    debugLog(\"Characteristic:\", cubeCharacteristic);\n\n    // TODO: Can we safely save the async promise instead of waiting for the response?\n\n    const originalValue = await decodeState(new Uint8Array((await cubeCharacteristic.readValue()).buffer));\n    debugLog(\"Original value:\", originalValue);\n    const cube = new GiiKERCube(server, cubeCharacteristic, originalValue);\n\n    await cubeCharacteristic.startNotifications();\n    cubeCharacteristic.addEventListener(\n      \"characteristicvaluechanged\",\n      cube.onCubeCharacteristicChanged.bind(cube),\n    );\n\n    return cube;\n  }\n  private constructor(private server: BluetoothRemoteGATTServer, private cubeCharacteristic: BluetoothRemoteGATTCharacteristic, private originalValue?: Uint8Array | null) {\n    super();\n  }\n\n  public name(): string | undefined {\n    return this.server.device.name;\n  }\n\n  public async getState(): Promise<PuzzleState> {\n    return this.toReid333(new Uint8Array((await this.cubeCharacteristic.readValue()).buffer));\n  }\n\n  private getBit(val: Uint8Array, i: number): number {\n    const n = ((i / 8) | 0);\n    const shift = 7 - (i % 8);\n    return (val[n] >> shift) & 1;\n  }\n\n  private toReid333(val: Uint8Array): Transformation {\n    const state = {\n      EDGE: {\n        permutation: new Array(12),\n        orientation: new Array(12),\n      },\n      CORNER: {\n        permutation: new Array(8),\n        orientation: new Array(8),\n      },\n      CENTER: Reid333SolvedCenters,\n    };\n\n    for (let i = 0; i < 12; i++) {\n      const gi = epReid333toGiiKER[i];\n      state.EDGE.permutation[i] = epGiiKERtoReid333[getNibble(val, gi + 16) - 1];\n      state.EDGE.orientation[i] = this.getBit(val, gi + 112) ^ preEO[state.EDGE.permutation[i]] ^ postEO[i];\n    }\n    for (let i = 0; i < 8; i++) {\n      const gi = cpReid333toGiiKER[i];\n      state.CORNER.permutation[i] = cpGiiKERtoReid333[getNibble(val, gi) - 1];\n      state.CORNER.orientation[i] = (getNibble(val, gi + 8) * coFlip[gi] + preCO[state.CORNER.permutation[i]] + postCO[i]) % 3;\n    }\n    return state;\n  }\n\n  private async onCubeCharacteristicChanged(event: any): Promise<void> {\n    const val = await decodeState(new Uint8Array(event.target.value.buffer));\n    debugLog(val);\n    debugLog(val);\n\n    if (this.isRepeatedInitialValue(val)) {\n      debugLog(\"Skipping repeated initial value.\");\n      return;\n    }\n\n    const giikerState = [];\n    for (let i = 0; i < MESSAGE_LENGTH; i++) {\n      giikerState.push(Math.floor(val[i] / 16));\n      giikerState.push(val[i] % 16);\n    }\n    debugLog(giikerState);\n    const str = giikerStateStr(giikerState);\n    debugLog(str);\n\n    this.dispatchMove({\n      latestMove: giikerMoveToBlockMove(giikerState[32], giikerState[33]),\n      timeStamp: event.timeStamp,\n      debug: {\n        stateStr: str,\n      },\n      state: this.toReid333(val),\n    });\n  }\n\n  private isRepeatedInitialValue(val: Uint8Array): boolean {\n    if (typeof (this.originalValue) === \"undefined\") {\n      // TODO: Test this branch.\n      throw new Error(\"GiiKERCube has uninitialized original value.\");\n    }\n\n    if (this.originalValue === null) {\n      return false;\n    }\n\n    const originalValue = this.originalValue;\n    // Reset the value here, so we can return early below.\n    this.originalValue = null;\n\n    debugLog(\"Comparing against original value.\");\n    for (let i = 0; i < MESSAGE_LENGTH - 2; i++) {\n      if (originalValue[i] !== val[i]) {\n        debugLog(\"Different at index \", i);\n        return false;\n      }\n    }\n    return true;\n  }\n}\n","import { Quaternion } from \"three\";\nimport { BareBlockMove, BlockMove, Sequence } from \"../alg\";\nimport { BluetoothConfig, BluetoothPuzzle } from \"./bluetooth-puzzle\";\nimport { debugLog } from \"./debug\";\n\nconst UUIDs = {\n  goCubeService: \"6e400001-b5a3-f393-e0a9-e50e24dcca9e\",\n  goCubeStateCharacteristic: \"6e400003-b5a3-f393-e0a9-e50e24dcca9e\",\n};\n\n// TODO: Move this into a factory?\nexport const goCubeConfig: BluetoothConfig = {\n  filters: [\n    { namePrefix: \"GoCube\" },\n  ],\n  optionalServices: [\n    UUIDs.goCubeService,\n  ],\n};\n\n// https://stackoverflow.com/a/40031979\nfunction buf2hex(buffer: ArrayBuffer): string { // buffer is an ArrayBuffer\n  return Array.prototype.map.call(new Uint8Array(buffer), (x: number) => (\"00\" + x.toString(16)).slice(-2)).join(\"\");\n}\n\nfunction bufferToString(buffer: ArrayBuffer): string {\n  const byteView = new Uint8Array(buffer);\n  let str = \"\";\n  for (const charCode of byteView) {\n    str += String.fromCharCode(charCode);\n  }\n  return str;\n}\n\nconst moveMap: BlockMove[] = [\n  BareBlockMove(\"B\", 1),\n  BareBlockMove(\"B\", -1),\n  BareBlockMove(\"F\", 1),\n  BareBlockMove(\"F\", -1),\n  BareBlockMove(\"U\", 1),\n  BareBlockMove(\"U\", -1),\n  BareBlockMove(\"D\", 1),\n  BareBlockMove(\"D\", -1),\n  BareBlockMove(\"R\", 1),\n  BareBlockMove(\"R\", -1),\n  BareBlockMove(\"L\", 1),\n  BareBlockMove(\"L\", -1),\n];\n\nexport class GoCube extends BluetoothPuzzle {\n\n  // We have to perform async operations before we call the constructor.\n  public static async connect(server: BluetoothRemoteGATTServer): Promise<GoCube> {\n    const service = await server.getPrimaryService(UUIDs.goCubeService);\n    debugLog({ service });\n    const goCubeStateCharacteristic = await service.getCharacteristic(UUIDs.goCubeStateCharacteristic);\n    debugLog({ goCubeStateCharacteristic });\n\n    const cube = new GoCube(server, goCubeStateCharacteristic);\n\n    await goCubeStateCharacteristic.startNotifications();\n    goCubeStateCharacteristic.addEventListener(\n      \"characteristicvaluechanged\",\n      cube.onCubeCharacteristicChanged.bind(cube),\n    );\n\n    return cube;\n  }\n\n  // public async getState(): Promise<PuzzleState> {\n  //   return new Promise((resolve, reject) => {\n  //     this.resolve = (value: any) => {\n  //       resolve(buf2hex(value.buffer) as any);\n  //     };\n  //     this.goCubeStateCharacteristic.startNotifications();\n  //   });\n  // }\n\n  private recorded: any[][] = [];\n\n  private homeQuatInverse: Quaternion | null = null;\n  private lastRawQuat: Quaternion = new Quaternion(0, 0, 0, 1);\n  private currentQuat: Quaternion = new Quaternion(0, 0, 0, 1);\n  private lastTarget: Quaternion = new Quaternion(0, 0, 0, 1);\n  private alg: Sequence = new Sequence([]);\n\n  private constructor(private server: BluetoothRemoteGATTServer, public goCubeStateCharacteristic: BluetoothRemoteGATTCharacteristic) {\n    super();\n  }\n\n  public reset(): void {\n    this.resetAlg();\n    this.resetOrientation();\n  }\n\n  public resetAlg(algo?: Sequence): void {\n    this.alg = algo || new Sequence([]);\n  }\n\n  public resetOrientation(): void {\n    this.homeQuatInverse = this.lastRawQuat.clone().inverse();\n    this.currentQuat = new Quaternion(0, 0, 0, 1);\n    this.lastTarget = new Quaternion(0, 0, 0, 1);\n  }\n\n  public name(): string | undefined {\n    return this.server.device.name;\n  }\n\n  private onCubeCharacteristicChanged(event: any): void {\n    const buffer: DataView = event.target.value;\n    this.recorded.push([event.timeStamp, buf2hex(buffer.buffer)]);\n    if (buffer.byteLength === 8) {\n      const move = moveMap[buffer.getUint8(3)];\n      this.alg = new Sequence(this.alg.nestedUnits.concat([move]));\n      this.dispatchMove({\n        latestMove: moveMap[buffer.getUint8(3)],\n        timeStamp: event.timeStamp,\n        debug: {\n          stateStr: buf2hex(buffer.buffer),\n        },\n      });\n    } else {\n      const coords = bufferToString(buffer.buffer.slice(3, buffer.byteLength - 3)).split(\"#\").map((s) => parseInt(s, 10) / 16384);\n      const quat = new Quaternion(coords[0], coords[1], coords[2], coords[3]);\n\n      this.lastRawQuat = quat.clone();\n\n      if (!this.homeQuatInverse) {\n        this.homeQuatInverse = quat.clone().inverse();\n      }\n\n      const targetQuat = quat.clone().multiply(this.homeQuatInverse!.clone());\n      targetQuat.y = -targetQuat.y; // GoCube axis fix.\n\n      this.lastTarget.slerp(targetQuat, 0.5);\n      this.currentQuat.rotateTowards(this.lastTarget, rotateTowardsRate);\n\n      const { x, y, z, w } = this.currentQuat;\n      this.dispatchOrientation({\n        quaternion: { x, y, z, w },\n        timeStamp: event.timeStamp,\n      });\n    }\n  }\n}\n\nconst rotateTowardsRate = 0.5;\n","import { keyToMove } from \"../alg\";\nimport { KPuzzle, Puzzles } from \"../kpuzzle\";\nimport { BluetoothPuzzle, PuzzleState } from \"./bluetooth-puzzle\";\n\nconst def = Puzzles[\"3x3x3\"];\n\nexport class KeyboardPuzzle extends BluetoothPuzzle {\n  public puzzle: KPuzzle = new KPuzzle(def);\n  // TODO: Decide on the right arguments.\n  constructor(target: any) {\n    super();\n    // TODO: Filter out repeated keydown?\n    target.addEventListener(\"keydown\", this.onKeyDown.bind(this));\n  }\n\n  public name(): string | undefined {\n    return \"Keyboard Input\";\n  }\n\n  public async getState(): Promise<PuzzleState> {\n    return this.puzzle.state;\n  }\n\n  private onKeyDown(e: KeyboardEvent): void {\n    if (e.altKey || e.ctrlKey || e.metaKey || e.shiftKey) {\n      return;\n    }\n\n    const move = keyToMove(e);\n    if (move) {\n      this.puzzle.applyBlockMove(move);\n      this.dispatchMove({\n        latestMove: move,\n        timeStamp: e.timeStamp,\n        state: this.puzzle.state,\n      });\n      e.preventDefault();\n    }\n  }\n}\n\n// TODO: Type\nexport async function debugKeyboardConnect(target: any = window): Promise<KeyboardPuzzle> {\n  return new KeyboardPuzzle(target);\n}\n","import { BluetoothPuzzle } from \"./bluetooth-puzzle\";\nimport { debugLog } from \"./debug\";\nimport { ganConfig, GanCube } from \"./gan\";\nimport { giiKERConfig, GiiKERCube } from \"./giiker\";\nimport { GoCube, goCubeConfig } from \"./gocube\";\n\n/******** requestOptions ********/\n\nexport interface BluetoothConfig {\n  filters: BluetoothRequestDeviceFilter[];\n  optionalServices: BluetoothServiceUUID[];\n}\n\nfunction requestOptions(acceptAllDevices: boolean = false): RequestDeviceOptions {\n  const options = acceptAllDevices ? {\n    acceptAllDevices: true,\n    optionalServices: [] as BluetoothServiceUUID[],\n  } : {\n      filters: [] as BluetoothRequestDeviceFilter[],\n      optionalServices: [] as BluetoothServiceUUID[],\n    };\n  for (const config of [\n    ganConfig,\n    giiKERConfig,\n    goCubeConfig,\n  ]) {\n    if (!acceptAllDevices) {\n      options.filters = options.filters!.concat(config.filters);\n    }\n    options.optionalServices = options.optionalServices.concat(config.optionalServices);\n  }\n  debugLog({ requestOptions: options });\n  return options;\n}\n\n/******** connect() ********/\n\ninterface BluetoothConnectOptions {\n  acceptAllDevices?: boolean;\n}\n\n// We globally track the number of connection failures,\n// in order to offer the user recourse (accept all devices) if they're having issues.\n// This allows us to future-proof situations where a device might not show up in\n// the chooser, but works if we connect.\nlet consecutiveFailures = 0;\nconst MAX_FAILURES_BEFORE_ACCEPT_ALL_FALLBACK = 2;\n\n// TODO: Debug options to allow connecting to any device?\nexport async function connect(options: BluetoothConnectOptions = {}): Promise<BluetoothPuzzle> {\n  debugLog(\"Attempting to pair.\");\n  let device;\n  try {\n    let acceptAllDevices = options.acceptAllDevices;\n    if (!acceptAllDevices && consecutiveFailures >= MAX_FAILURES_BEFORE_ACCEPT_ALL_FALLBACK) {\n      console.info(`The last ${MAX_FAILURES_BEFORE_ACCEPT_ALL_FALLBACK} Bluetooth puzzle connection attempts failed. This time, the Bluetooth prompt will show all possible devices.`);\n      acceptAllDevices = true;\n    }\n    device = await navigator.bluetooth.requestDevice(requestOptions(acceptAllDevices));\n    consecutiveFailures = 0;\n  } catch (e) {\n    consecutiveFailures++;\n    throw new Error(e);\n  }\n  debugLog(\"Device:\", device);\n\n  if (typeof device.gatt === \"undefined\") {\n    return Promise.reject(\"Device did not have a GATT server.\");\n  }\n\n  const server = await device.gatt.connect();\n  debugLog(\"Server:\", server);\n\n  const name = server.device!.name || \"\";\n\n  // TODO by reading supported matched filters or provided services.\n  if (name && name.startsWith(\"GAN\")) {\n    return await GanCube.connect(server);\n  } else if (name && name.startsWith(\"GoCube\")) {\n    return await GoCube.connect(server);\n  } else {\n    return await GiiKERCube.connect(server);\n  }\n}\n"],"names":["maxAxis","v","Math","max","abs","x","y","z","Error","s2","sqrt","m","y z","Quaternion","-z y","x z","-x z","BasicRotationTransformer","[object Object]","moveEvent","orientationEvent","w","quaternion","quat","U","Vector3","F","maxU","applyQuaternion","maxF","oriQuat","console","log","q2","premultiply","MoveEvent","BluetoothPuzzle","this","listener","listeners","push","orientationListeners","transformers","transformer","transformMove","l","transformOrientation","DEBUG_LOGGING_ENABLED","enableDebugLogging","enable","debugLog","args","info","apply","zeros","Uint8Array","paddingBlockPlaintext","Array","fill","unsafeDecryptBlock","key","ciphertextBlock","paddingBlock","plaintextBlock","iv","window","crypto","subtle","encrypt","name","slice","unsafeEncryptBlockWithIV","cbcCiphertext","set","decrypt","ganMoveToBlockMove","0","BareBlockMove","2","3","5","6","8","9","11","12","14","15","17","homeQuatInverse","swap","probablyDecodedCorrectly","data","setSwap","fn","key10","decryptState","macAddress","keyBuffer","i","length","aesKey","keyBytes","importKey","decodeState","decrypted10","decrypted11","key11","PhysicalState","dataView","timeStamp","arr","buffer","arrLen","characteristic","value","readValue","Date","now","DataView","getInt16","wSquared","clone","inverse","multiply","previousMoveCounter","moveCounter","n","from","map","UUIDs","commands","reset","ganConfig","filters","namePrefix","optionalServices","reidEdgeOrder","split","reidCornerOrder","rotateLeft","s","pieceMap","forEach","edge","idx","piece","orientation","corner","gan356iCornerMappings","gan356iEdgeMappings","GanCube","service","server","physicalStateCharacteristic","lastMoveCounter","super","KPuzzle","Puzzles","startTrackingMoves","startsWith","warn","parseInt","getMacAddress","device","ganCubeService","getPrimaryService","getCharacteristic","initialMoveCounter","read","intervalHandle","setInterval","intervalHandler","bind","INTERVAL_MS","clearInterval","physicalState","numInterveningMoves","numMovesSince","move","latestMoves","kpuzzle","applyBlockMove","dispatchMove","latestMove","debug","debugInfo","state","rotQuat","dispatchOrientation","readActualAngleAndBatteryCharacteristic","readFaceletStatus1Characteristic","stickers","j","CORNER","permutation","EDGE","CENTER","cornerMapping","pieceInfo","join","edgeMapping","cachedFaceletStatus1Characteristic","cachedFaceletStatus2Characteristic","cachedActualAngleAndBatteryCharacteristic","faceletStatus1Characteristic","writeValue","faceletStatus2Characteristic","prototype","call","toString","actualAngleAndBatteryCharacteristic","giiKERConfig","services","giikerMoveToBlockMove","face","amount","Reid333SolvedCenters","epGiiKERtoReid333","epReid333toGiiKER","preEO","postEO","cpGiiKERtoReid333","cpReid333toGiiKER","preCO","postCO","coFlip","getNibble","val","lookup","probablyEncrypted","offset1","offset2","output","GiiKERCube","cubeCharacteristic","originalValue","cubeService","cube","startNotifications","addEventListener","onCubeCharacteristicChanged","toReid333","shift","gi","getBit","event","target","isRepeatedInitialValue","giikerState","floor","str","giikerStateStr","stateStr","MESSAGE_LENGTH","goCubeConfig","buf2hex","moveMap","GoCube","goCubeStateCharacteristic","Sequence","resetAlg","resetOrientation","algo","alg","lastRawQuat","currentQuat","lastTarget","recorded","byteLength","getUint8","nestedUnits","concat","coords","byteView","charCode","String","fromCharCode","bufferToString","targetQuat","slerp","rotateTowards","rotateTowardsRate","def","KeyboardPuzzle","onKeyDown","puzzle","e","altKey","ctrlKey","metaKey","shiftKey","keyToMove","preventDefault","debugKeyboardConnect","consecutiveFailures","connect","options","acceptAllDevices","navigator","bluetooth","requestDevice","config","requestOptions","gatt","Promise","reject"],"mappings":";;;;;;;;;;;;;;wVAYA,SAASA,EAAQC,GAEf,OADeC,KAAKC,IAAID,KAAKE,IAAIH,EAAEI,GAAIH,KAAKE,IAAIH,EAAEK,GAAIJ,KAAKE,IAAIH,EAAEM,KAE/D,KAAKN,EAAEI,EACL,MAAO,IACT,KAAMJ,EAAEI,EACN,MAAO,KACT,KAAKJ,EAAEK,EACL,MAAO,IACT,KAAML,EAAEK,EACN,MAAO,KACT,KAAKL,EAAEM,EACL,MAAO,IACT,KAAMN,EAAEM,EACN,MAAO,KACT,QACE,MAAM,IAAIC,MAAM,WAItB,MAAMC,EAAKP,KAAKQ,KAAK,IAEfC,EAAiC,CACrCC,MAAO,IAAIC,EAAW,EAAG,EAAG,EAAG,GAC/BC,OAAQ,IAAID,EAAWJ,EAAI,EAAG,EAAGA,GACjCM,MAAO,IAAIF,EAAW,EAAG,GAAIJ,EAAIA,GACjCO,OAAQ,IAAIH,EAAW,EAAG,EAAGJ,EAAIA,UAGtBQ,yBAGJC,cAAcC,IAGdD,qBAAqBE,GAC1B,MAAMf,EAAEA,EAACC,EAAEA,EAACC,EAAEA,EAACc,EAAEA,GAAMD,EAAiBE,WAClCC,EAAO,IAAIV,EAAWR,EAAGC,EAAGC,EAAGc,GAE/BG,EAAI,IAAIC,EAAQ,EAAG,EAAG,GACtBC,EAAI,IAAID,EAAQ,EAAG,EAAG,GACtBE,EAAO3B,EAAQwB,EAAEI,gBAAgBL,IACjCM,EAAO7B,EAAQ0B,EAAEE,gBAAgBL,IAEjCO,EAAUnB,EAAE,GAAGgB,KAAQE,MAAWlB,EAAE,OAE1CoB,QAAQC,IAAIT,GACZQ,QAAQC,IAAIF,GACZ,MAAMG,EAAKV,EAAKW,YAAYJ,GAG5BC,QAAQC,IAAIC,GAEZb,EAAiBE,WAAa,CAC5BjB,EAAG4B,EAAG5B,EACNC,EAAG2B,EAAG3B,EACNC,EAAG0B,EAAG1B,EACNc,EAAGY,EAAGZ,GAGRU,QAAQC,IAAIZ,EAAiBE,aC7DjC,MAAaa,WAqBb,MAAsBC,gBAAtBlB,cACSmB,kBAAoC,GACjCA,eAA2C,GAC3CA,0BAA6D,GAK1DnB,oDACX,MAAM,IAAIV,MAAM,uBAGXU,gBAAgBoB,GACrBD,KAAKE,UAAUC,KAAKF,GAGfpB,uBAAuBoB,GAC5BD,KAAKI,qBAAqBD,KAAKF,GAG1BpB,0CACLmB,KAAKK,aAAaF,KAAK,IAAIvB,0BAGnBC,aAAaC,GACrB,IAAK,MAAMwB,KAAeN,KAAKK,aAC7BC,EAAYC,cAAczB,GAE5B,IAAK,MAAM0B,KAAKR,KAAKE,UACnBM,EAAE1B,GAIID,oBAAoBE,GAC5B,IAAK,MAAMuB,KAAeN,KAAKK,aAC7BC,EAAYG,qBAAqB1B,GAEnC,IAAK,MAAMyB,KAAKR,KAAKI,qBAEnBI,EAAEzB,ICvER,IAAI2B,GAAwB,WAEZC,EAAmBC,GACjCF,EAAwBE,WAGVC,KAAYC,GACrBJ,IAIDhB,QAAQqB,KACVrB,QAAQqB,KAAKC,MAAMtB,QAASoB,GAE5BpB,QAAQC,IAAIqB,MAAMtB,QAASoB,ICd/B,MACMG,EAAQ,IAAIC,WADA,IAEZC,EAAwB,IAAID,WAAW,IAAIE,MAF/B,IAEgDC,KAFhD,cA8BIC,EAAmBC,EAAgBC,4CACvD,MAAMC,QAhBR,SAAwCF,EAAgBG,EAA6BC,4CACnF,aAAcC,OAAOC,OAAOC,OAAOC,QACjC,CACEC,KAfU,UAgBVL,GAAAA,GAEFJ,EACAG,IACCO,MAAM,EAvBO,OA+BWC,CACzBX,EACAJ,EACAK,GAGIW,EAAgB,IAAIjB,WAAW,IAIrC,OAHAiB,EAAcC,IAAI,IAAIlB,WAAWM,GAAkB,GACnDW,EAAcC,IAAI,IAAIlB,WAAWO,GAvCjB,WAyCFG,OAAOC,OAAOC,OAAOO,QACjC,CACEL,KAxCU,UAyCVL,GAAIV,GAENM,EACAY,IACCF,MAAM,EAhDO,OCUlB,MAIMK,EAAiD,CACrDC,EAAMC,EAAc,KACpBC,EAAMD,EAAc,KAAM,GAC1BE,EAAMF,EAAc,KACpBG,EAAMH,EAAc,KAAM,GAC1BI,EAAMJ,EAAc,KACpBK,EAAML,EAAc,KAAM,GAC1BM,EAAMN,EAAc,KACpBO,GAAMP,EAAc,KAAM,GAC1BQ,GAAMR,EAAc,KACpBS,GAAMT,EAAc,KAAM,GAC1BU,GAAMV,EAAc,KACpBW,GAAMX,EAAc,KAAM,IAG5B,IAAIY,EAAqC,KAErCC,EAAO,CAACrF,EAAWC,EAAWC,IACzB,EAAED,EAAGC,GAAIF,GAQlB,SAASsF,EAAyBC,GAChC,OAAOA,EAAK,IAAM,IAAQA,EAAK,IAAM,IAAQA,EAAK,IAAM,IAAQA,EAAK,IAAM,IAAQA,EAAK,IAAM,IAAQA,EAAK,IAAM,GANlH3B,OAAe4B,QAAWC,IACzBJ,EAAOI,EACPL,EAAkB,MAOpB,MAAMM,EAAQ,IAAIxC,WAAW,CAAC,IAAK,IAAK,GAAI,IAAK,GAAI,IAAK,GAAI,IAAK,IAAK,GAAI,IAAK,GAAI,GAAI,IAAK,IAAK,MACrF,IAAIA,WAAW,CAAC,GAAI,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,EAAG,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,MAGjG,SAAeyC,EAAaJ,EAAkBhC,EAAiBqC,4CAE7D,MAAMC,EAAY,IAAI3C,WAAWwC,GACjC,IAAK,IAAII,EAAI,EAAGA,EAAIF,EAAWG,OAAQD,IACrCD,EAAUC,IAAMD,EAAUC,GAAKF,EAAWE,IAAM,IAGlD,MAAME,iBDlDwBC,4CAC9B,aAAapC,OAAOC,OAAOoC,UACzB,MACAD,EALY,WAOZ,EACA,CAAC,UAAW,eC4COC,CAAU,IAAIhD,WAAW2C,IAG9C,OAFAN,EAAKnB,IAAI,IAAIlB,iBAAiBI,EAAmB0C,EAAQT,EAAKtB,MAAM,KAAM,GAC1EsB,EAAKnB,IAAI,IAAIlB,iBAAiBI,EAAmB0C,EAAQT,EAAKtB,MAAM,EAAG,MAAO,GACvEsB,KAIT,SAAeY,EAAYZ,EAAkBK,4CAC3C,GAAIN,EAAyBC,GAC3B,OAAOA,EAET,MAAMa,QAAoBT,EAAaJ,EAAMG,EAAOE,GACpD,GAAIN,EAAyBc,GAC3B,OAAOA,EAET,MAAMC,QAAoBV,EAAaJ,EAAMe,EAAOV,GACpD,GAAIN,EAAyBe,GAC3B,OAAOA,EAET,MAAM,IAAIlG,MAAM,uBAGlB,MAAMoG,cASJ1F,YAA4B2F,EAA2BC,GAErD,GAF0BzE,cAAAwE,EAA2BxE,eAAAyE,EAD/CzE,YAAS,GAEfA,KAAK0E,IAAM,IAAIxD,WAAWsD,EAASG,QAC/B3E,KAAK0E,IAAIX,SAAW/D,KAAK4E,OAC3B,MAAM,IAAIzG,MAAM,2BAVbU,YAAkBgG,EAAmDjB,4CAC1E,MAAMkB,QAAcX,EAAY,IAAIjD,kBAAkB2D,EAAeE,aAAaJ,QAASf,GACrFa,EAAYO,KAAKC,MACvB,OAAO,IAAIV,cAAc,IAAIW,SAASJ,EAAMH,QAASF,MAWhD5F,UACL,IAAIb,EAAIgC,KAAKwE,SAASW,SAAS,GAAG,GAAQ,MACtClH,EAAI+B,KAAKwE,SAASW,SAAS,GAAG,GAAQ,MACtCjH,EAAI8B,KAAKwE,SAASW,SAAS,GAAG,GAAQ,OACzCnH,EAAGC,EAAGC,GAAKmF,EAAKrF,EAAGC,EAAGC,GACvB,MAAMkH,EAAW,GAAKpH,EAAIA,EAAIC,EAAIA,EAAIC,EAAIA,GACpCc,EAAIoG,EAAW,EAAIvH,KAAKQ,KAAK+G,GAAY,EACzClG,EAAO,IAAIV,EAAWR,EAAGC,EAAGC,EAAGc,GAMrC,OAJKoE,IACHA,EAAkBlE,EAAKmG,QAAQC,WAG1BpG,EAAKmG,QAAQE,SAASnC,EAAiBiC,SAIzCxG,cACL,OAAOmB,KAAK0E,IAAI,IAGX7F,cAAc2G,GACnB,OAAQxF,KAAKyF,cAAgBD,EAAuB,IAM/C3G,YAAY6G,GACjB,GAAIA,EAAI,GAAKA,EA9GQ,EA+GnB,MAAM,IAAIvH,MAAM,gDAAgDuH,MAElE,OAAOtE,MAAMuE,KAAK3F,KAAK0E,IAAIzC,MAAM,GAAKyD,EAAG,KAAKE,IAAK9B,GAAMxB,EAAmBwB,IAGvEjF,YACL,MAAO,CACL6F,IAAK1E,KAAK0E,MAMhB,MAAMmB,EACY,uCADZA,EAEyB,uCAFzBA,EAGiC,uCAHjCA,EAI0B,uCAJ1BA,EAK0B,uCAG1BC,EAA4C,CAChDC,MAAO,IAAI7E,WAAW,CAAC,EAAM,EAAM,GAAM,EAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,OAIlH8E,EAA6B,CACxCC,QAAS,CACP,CAAEC,WAAY,QAEhBC,iBAAkB,CAChBN,IAQJ,MAAMO,EAAgB,sCAAsCC,MAAM,KAC5DC,EAAkB,kCAAkCD,MAAM,KAOhE,SAASE,EAAWC,EAAW1C,GAC7B,OAAO0C,EAAEvE,MAAM6B,GAAK0C,EAAEvE,MAAM,EAAG6B,GAGjC,MAAM2C,EAAuC,GAE7CL,EAAcM,QAAQ,CAACC,EAAMC,KAC3B,IAAK,IAAI9C,EAAI,EAAGA,EAAI,EAAGA,IACrB2C,EAASF,EAAWI,EAAM7C,IAAM,CAAE+C,MAAOD,EAAKE,YAAahD,KAG/DwC,EAAgBI,QAAQ,CAACK,EAAQH,KAC/B,IAAK,IAAI9C,EAAI,EAAGA,EAAI,EAAGA,IACrB2C,EAASF,EAAWQ,EAAQjD,IAAM,CAAE+C,MAAOD,EAAKE,YAAahD,KAIjE,MAAMkD,EAAwB,CAC5B,CAAC,EAAG,GAAI,IAAK,CAAC,EAAG,GAAI,IAAK,CAAC,EAAG,GAAI,IAAK,CAAC,EAAG,GAAI,IAC/C,CAAC,GAAI,GAAI,IAAK,CAAC,GAAI,GAAI,IAAK,CAAC,GAAI,GAAI,IAAK,CAAC,GAAI,GAAI,IAG/CC,EAAsB,CAC1B,CAAC,EAAG,IAAK,CAAC,EAAG,IAAK,CAAC,EAAG,IAAK,CAAC,EAAG,IAC/B,CAAC,GAAI,IAAK,CAAC,GAAI,GAAI,CAAC,GAAI,IAAK,CAAC,GAAI,IAClC,CAAC,GAAI,IAAK,CAAC,GAAI,IAAK,CAAC,GAAI,IAAK,CAAC,GAAI,WAwBxBC,gBAAgBnH,gBAuB3BlB,YAA4BsI,EAA6CC,EAA2CC,EAAwEC,EAAiC1D,GAC3N2D,QAD0BvH,aAAAmH,EAA6CnH,YAAAoH,EAA2CpH,iCAAAqH,EAAwErH,qBAAAsH,EAAiCtH,gBAAA4D,EANtN5D,iBAlOmB,IAmOlBA,oBAAgC,KAChCA,aAAmB,IAAIwH,EAAQC,EAAQ,UAM7CzH,KAAK0H,qBAvBA7I,eAAqBuI,4CAC1B,MAAMxD,EAdV,SAAuB5B,GACrB,MAAM4B,EAAa,IAAI1C,WAAW,CAAC,GAAM,GAAM,IAAM,EAAM,EAAM,IAOjE,OANoB,KAAhBc,EAAK+B,QAAkB/B,EAAK2F,WAAW,SACzCjI,QAAQkI,KAAK,2BAEfhE,EAAW,GAAKiE,SAAS7F,EAAKC,MAAM,EAAG,GAAI,IAC3C2B,EAAW,GAAKiE,SAAS7F,EAAKC,MAAM,EAAG,GAAI,IAC3C2B,EAAW,GAAKiE,SAAS7F,EAAKC,MAAM,EAAG,IAAK,IACrC2B,EAMckE,CAAcV,EAAOW,OAAQ/F,MAE1CgG,QAAuBZ,EAAOa,kBAAkBpC,GACtDhF,EAAS,WAAYmH,GAErB,MAAMX,QAAoCW,EAAeE,kBAAkBrC,GAC3EhF,EAAS,kBAAmBwG,GAE5B,MAAMc,SAA4B5D,cAAc6D,KAAKf,EAA6BzD,IAAa6B,cAG/F,OAFA5E,EAAS,wBAAyBsH,GACrB,IAAIjB,QAAQc,EAAgBZ,EAAQC,EAA6Bc,EAAoBvE,MAe7F/E,OACL,OAAOmB,KAAKoH,OAAOW,OAAO/F,KAGrBnD,qBAGLmB,KAAKqI,eAAiBzG,OAAO0G,YAAYtI,KAAKuI,gBAAgBC,KAAKxI,MAAOA,KAAKyI,aAG1E5J,oBACL,IAAKmB,KAAKqI,eACR,MAAM,IAAIlK,MAAM,uBAElBuK,cAAc1I,KAAKqI,gBACnBrI,KAAKqI,eAAiB,KAIXxJ,2DACX,MAAM8J,QAAsBpE,cAAc6D,KAAKpI,KAAKqH,4BAA6BrH,KAAK4D,YACtF,IAAIgF,EAAsBD,EAAcE,cAAc7I,KAAKsH,iBAEvDsB,EAlQiB,IAmQnB/H,EAAS,4BAA4B+H,EAnQlB,WAoQnBA,EApQmB,GAsQrB,IAAK,MAAME,KAAQH,EAAcI,YAAYH,GAE3C5I,KAAKgJ,QAAQC,eAAeH,GAC5B9I,KAAKkJ,aAAa,CAChBC,WAAYL,EACZrE,UAAWkE,EAAclE,UACzB2E,MAAOT,EAAcU,YACrBC,MAAOtJ,KAAKgJ,QAAQM,QAIxB,MAAMtL,EAAEA,EAACC,EAAEA,EAACC,EAAEA,EAACc,EAAEA,GAAM2J,EAAcY,UACrCvJ,KAAKwJ,oBAAoB,CACvB/E,UAAWkE,EAAclE,UACzBxF,WAAY,CAAEjB,EAAAA,EAAGC,EAAAA,EAAGC,EAAAA,EAAGc,EAAAA,KAEzBgB,KAAKsH,gBAAkBqB,EAAclD,iBAG1B5G,sDACX,OAAO,IAAIqC,iBAAiBlB,KAAKyJ,2CAA2C,MAGjE5K,oDACX,MAAM6F,QAAwBP,EAAY,IAAIjD,iBAAkBlB,KAAK0J,oCAAsC1J,KAAK4D,YAC1G+F,EAAqB,GAC3B,IAAK,IAAI7F,EAAI,EAAGA,EAAI,GAAIA,GAAK,EAAG,CAC9B,IAAIlG,IAAO8G,EAAQ,EAAJZ,IAAU,GAAKY,EAAKZ,EAAI,EAAK,IAAO,GAAKY,EAAKZ,EAAI,EAAK,GACtE,IAAK,IAAI8F,EAAI,EAAGA,EAAI,EAAGA,IACrBD,EAASxJ,KAAS,EAAJvC,GACdA,IAAM,EAIV,MAAM0L,EAAqB,CACzBO,OAAQ,CACNC,YAAa,GACbhD,YAAa,IAEfiD,KAAM,CACJD,YAAa,GACbhD,YAAa,IAEfkD,OAAQ,CACNF,YAAa,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAC7BhD,YAAa,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,KAIjC,IAAK,MAAMmD,KAAiBjD,EAAuB,CACjD,MAAMkD,EAAuBzD,EAASwD,EAAcrE,IAAK9B,GA/H7C,SA+H6D6F,EAAS7F,KAAKqG,KAAK,KAC5Fb,EAAMO,OAAOC,YAAY3J,KAAK+J,EAAUrD,OACxCyC,EAAMO,OAAO/C,YAAY3G,KAAK+J,EAAUpD,aAG1C,IAAK,MAAMsD,KAAenD,EAAqB,CAC7C,MAAMiD,EAAuBzD,EAAS2D,EAAYxE,IAAK9B,GArI3C,SAqI2D6F,EAAS7F,KAAKqG,KAAK,KAC1Fb,EAAMS,KAAKD,YAAY3J,KAAK+J,EAAUrD,OACtCyC,EAAMS,KAAKjD,YAAY3G,KAAK+J,EAAUpD,aAGxC,OAAOwC,KAGIzK,wEAEX,OADAmB,KAAKqK,mCAAqCrK,KAAKqK,oCAAsCrK,KAAKmH,QAAQe,kBAAkBrC,GAC7G7F,KAAKqK,sCAGDxL,wEAEX,OADAmB,KAAKsK,mCAAqCtK,KAAKsK,oCAAsCtK,KAAKmH,QAAQe,kBAAkBrC,GAC7G7F,KAAKsK,sCAGDzL,+EAEX,OADAmB,KAAKuK,0CAA4CvK,KAAKuK,2CAA6CvK,KAAKmH,QAAQe,kBAAkBrC,GAC3H7F,KAAKuK,6CAGD1L,iDACX,MAAM2L,QAAqCxK,KAAKwK,qCAC1CA,EAA6BC,WAAW3E,EAASC,UAG5ClH,4EACX,MAAM2L,QAAqCxK,KAAKwK,+BAChD,aAAcA,EAA6BzF,aAAaJ,UAG7C9F,4EACX,MAAM6L,QAAqC1K,KAAK0K,+BAChD,OA/Ma/F,SA+MS+F,EAA6B3F,aAAaJ,OA9M3DvD,MAAMuJ,UAAU/E,IAAIgF,KAAK,IAAI1J,WAAWyD,GAAU3G,IAAe,KAAOA,EAAE6M,SAAS,KAAK5I,OAAO,IAAIkI,KAAK,KADjH,IAAiBxF,KAkNF9F,mFACX,MAAMiM,QAA4C9K,KAAK8K,sCACvD,aAAcA,EAAoC/F,aAAaJ,WC3WnE,MAEMkB,EACS,uCADTA,EAEgB,uCAITkF,EAAgC,CAC3C9E,QAAS,CAGP,CAAEC,WAAY,MACd,CAAE8E,SAAU,CAAC,yCACb,CAAEA,SAAU,CAAC,yCACb,CAAEA,SAAU,CAAC,0CAEf7E,iBAAkB,CAGhBN,IAOJ,SAASoF,EAAsBC,EAAcC,GAQ3C,OAPe,IAAXA,IACFtK,EAAS,gBAAiBqK,EAAMC,GAChCA,EAAS,GAKJ3I,EADQ,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAK0I,GAFnDC,EAAS,CAAC,EAAG,EAAG,GAAI,GAAGA,IA6BzB,MAAMC,EAAuB,CAC3BtB,YAAa,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAC7BhD,YAAa,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,IAGzBuE,EAA8B,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,IACjEC,EAA8B,CAAC,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAEjEC,EAAkB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACpDC,EAAmB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAErDC,EAA8B,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACpDC,EAA8B,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAEpDC,EAAkB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACxCC,EAAmB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAEzCC,EAAmB,EAAE,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,GAAI,GAEnD,SAASC,EAAUC,EAAiBjI,GAClC,OAAIA,EAAI,GAAM,EACLiI,EAAKjI,EAAI,EAAK,GAAK,GAErB,EAAKiI,EAAKjI,EAAI,EAAK,GAAK,GAOjC,MAAMkI,EAAS,CAAC,IAAK,GAAI,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,IAAK,IAAK,GAAI,IAAK,GAAI,GAAI,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,EAAG,IAAK,GAAI,IAAK,IAAK,IAajL,SAAe7H,EAAYZ,4CACzB,OAlBF,SAA2BA,GACzB,OAAoB,MAAbA,EAAK,IAiBP0I,CAAkB1I,SAZzB,SAAsBA,GACpB,MAAM2I,EAAUJ,EAAUvI,EAAM,IAC1B4I,EAAUL,EAAUvI,EAAM,IAC1B6I,EAAS,IAAIlL,WAhGE,IAiGrB,IAAK,IAAI4C,EAAI,EAAGA,EAjGK,GAiGeA,IAClCsI,EAAOtI,GAAKP,EAAKO,GAAKkI,EAAOE,EAAUpI,GAAKkI,EAAOG,EAAUrI,GAE/D,OAAOsI,EAQMzI,CAAaJ,GAFjBA,WAME8I,mBAAmBtM,gBAwB9BlB,YAA4BuI,EAA2CkF,EAA+DC,GACpIhF,QAD0BvH,YAAAoH,EAA2CpH,wBAAAsM,EAA+DtM,mBAAAuM,EAtB/H1N,eAAqBuI,4CAE1B,MAAMoF,QAAoBpF,EAAOa,kBAAkBpC,GACnDhF,EAAS,WAAY2L,GAErB,MAAMF,QAA2BE,EAAYtE,kBAAkBrC,GAC/DhF,EAAS,kBAAmByL,GAI5B,MAAMC,QAAsBpI,EAAY,IAAIjD,kBAAkBoL,EAAmBvH,aAAaJ,SAC9F9D,EAAS,kBAAmB0L,GAC5B,MAAME,EAAO,IAAIJ,WAAWjF,EAAQkF,EAAoBC,GAQxD,aANMD,EAAmBI,qBACzBJ,EAAmBK,iBACjB,6BACAF,EAAKG,4BAA4BpE,KAAKiE,IAGjCA,KAMF5N,OACL,OAAOmB,KAAKoH,OAAOW,OAAO/F,KAGfnD,oDACX,OAAOmB,KAAK6M,UAAU,IAAI3L,kBAAkBlB,KAAKsM,mBAAmBvH,aAAaJ,YAG3E9F,OAAOkN,EAAiBjI,GAC9B,MACMgJ,EAAQ,EAAKhJ,EAAI,EACvB,OAAQiI,EAFIjI,EAAI,EAAK,IAEHgJ,EAAS,EAGrBjO,UAAUkN,GAChB,MAAMzC,EAAQ,CACZS,KAAM,CACJD,YAAa,IAAI1I,MAAM,IACvB0F,YAAa,IAAI1F,MAAM,KAEzByI,OAAQ,CACNC,YAAa,IAAI1I,MAAM,GACvB0F,YAAa,IAAI1F,MAAM,IAEzB4I,OAAQoB,GAGV,IAAK,IAAItH,EAAI,EAAGA,EAAI,GAAIA,IAAK,CAC3B,MAAMiJ,EAAKzB,EAAkBxH,GAC7BwF,EAAMS,KAAKD,YAAYhG,GAAKuH,EAAkBS,EAAUC,EAAKgB,EAAK,IAAM,GACxEzD,EAAMS,KAAKjD,YAAYhD,GAAK9D,KAAKgN,OAAOjB,EAAKgB,EAAK,KAAOxB,EAAMjC,EAAMS,KAAKD,YAAYhG,IAAM0H,EAAO1H,GAErG,IAAK,IAAIA,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,MAAMiJ,EAAKrB,EAAkB5H,GAC7BwF,EAAMO,OAAOC,YAAYhG,GAAK2H,EAAkBK,EAAUC,EAAKgB,GAAM,GACrEzD,EAAMO,OAAO/C,YAAYhD,IAAMgI,EAAUC,EAAKgB,EAAK,GAAKlB,EAAOkB,GAAMpB,EAAMrC,EAAMO,OAAOC,YAAYhG,IAAM8H,EAAO9H,IAAM,EAEzH,OAAOwF,EAGKzK,4BAA4BoO,4CACxC,MAAMlB,QAAY5H,EAAY,IAAIjD,WAAW+L,EAAMC,OAAOpI,MAAMH,SAIhE,GAHA9D,EAASkL,GACTlL,EAASkL,GAEL/L,KAAKmN,uBAAuBpB,GAE9B,YADAlL,EAAS,oCAIX,MAAMuM,EAAc,GACpB,IAAK,IAAItJ,EAAI,EAAGA,EA/LG,GA+LiBA,IAClCsJ,EAAYjN,KAAKtC,KAAKwP,MAAMtB,EAAIjI,GAAK,KACrCsJ,EAAYjN,KAAK4L,EAAIjI,GAAK,IAE5BjD,EAASuM,GACT,MAAME,EA5JV,SAAwBF,GACtB,IAAIE,EAAM,GAUV,OATAA,GAAOF,EAAYnL,MAAM,EAAG,GAAGkI,KAAK,KACpCmD,GAAO,KACPA,GAAOF,EAAYnL,MAAM,EAAG,IAAIkI,KAAK,KACrCmD,GAAO,KACPA,GAAOF,EAAYnL,MAAM,GAAI,IAAIkI,KAAK,KACtCmD,GAAO,KACPA,GAAOF,EAAYnL,MAAM,GAAI,IAAIkI,KAAK,KACtCmD,GAAO,KACPA,GAAOF,EAAYnL,MAAM,GAAI,IAAIkI,KAAK,KAC/BmD,EAiJOC,CAAeH,GAC3BvM,EAASyM,GAETtN,KAAKkJ,aAAa,CAChBC,WAAY8B,EAAsBmC,EAAY,IAAKA,EAAY,KAC/D3I,UAAWwI,EAAMxI,UACjB2E,MAAO,CACLoE,SAAUF,GAEZhE,MAAOtJ,KAAK6M,UAAUd,QAIlBlN,uBAAuBkN,GAC7B,QAAoC,IAAxB/L,KAAkB,cAE5B,MAAM,IAAI7B,MAAM,gDAGlB,GAA2B,OAAvB6B,KAAKuM,cACP,OAAO,EAGT,MAAMA,EAAgBvM,KAAKuM,cAE3BvM,KAAKuM,cAAgB,KAErB1L,EAAS,qCACT,IAAK,IAAIiD,EAAI,EAAGA,EAAI2J,GAAoB3J,IACtC,GAAIyI,EAAczI,KAAOiI,EAAIjI,GAE3B,OADAjD,EAAS,sBAAuBiD,IACzB,EAGX,OAAO,GCxOX,MAAM+B,GACW,uCADXA,GAEuB,uCAIhB6H,GAAgC,CAC3CzH,QAAS,CACP,CAAEC,WAAY,WAEhBC,iBAAkB,CAChBN,KAKJ,SAAS8H,GAAQhJ,GACf,OAAOvD,MAAMuJ,UAAU/E,IAAIgF,KAAK,IAAI1J,WAAWyD,GAAU3G,IAAe,KAAOA,EAAE6M,SAAS,KAAK5I,OAAO,IAAIkI,KAAK,IAYjH,MAAMyD,GAAuB,CAC3BpL,EAAc,IAAK,GACnBA,EAAc,KAAM,GACpBA,EAAc,IAAK,GACnBA,EAAc,KAAM,GACpBA,EAAc,IAAK,GACnBA,EAAc,KAAM,GACpBA,EAAc,IAAK,GACnBA,EAAc,KAAM,GACpBA,EAAc,IAAK,GACnBA,EAAc,KAAM,GACpBA,EAAc,IAAK,GACnBA,EAAc,KAAM,UAGTqL,eAAe9N,gBAqC1BlB,YAA4BuI,EAA0C0G,GACpEvG,QAD0BvH,YAAAoH,EAA0CpH,+BAAA8N,EAR9D9N,cAAoB,GAEpBA,qBAAqC,KACrCA,iBAA0B,IAAIxB,EAAW,EAAG,EAAG,EAAG,GAClDwB,iBAA0B,IAAIxB,EAAW,EAAG,EAAG,EAAG,GAClDwB,gBAAyB,IAAIxB,EAAW,EAAG,EAAG,EAAG,GACjDwB,SAAgB,IAAI+N,EAAS,IAhC9BlP,eAAqBuI,4CAC1B,MAAMD,QAAgBC,EAAOa,kBAAkBpC,IAC/ChF,EAAS,CAAEsG,QAAAA,IACX,MAAM2G,QAAkC3G,EAAQe,kBAAkBrC,IAClEhF,EAAS,CAAEiN,0BAAAA,IAEX,MAAMrB,EAAO,IAAIoB,OAAOzG,EAAQ0G,GAQhC,aANMA,EAA0BpB,qBAChCoB,EAA0BnB,iBACxB,6BACAF,EAAKG,4BAA4BpE,KAAKiE,IAGjCA,KAwBF5N,QACLmB,KAAKgO,WACLhO,KAAKiO,mBAGApP,SAASqP,GACdlO,KAAKmO,IAAMD,GAAQ,IAAIH,EAAS,IAG3BlP,mBACLmB,KAAKoD,gBAAkBpD,KAAKoO,YAAY/I,QAAQC,UAChDtF,KAAKqO,YAAc,IAAI7P,EAAW,EAAG,EAAG,EAAG,GAC3CwB,KAAKsO,WAAa,IAAI9P,EAAW,EAAG,EAAG,EAAG,GAGrCK,OACL,OAAOmB,KAAKoH,OAAOW,OAAO/F,KAGpBnD,4BAA4BoO,GAClC,MAAMtI,EAAmBsI,EAAMC,OAAOpI,MAEtC,GADA9E,KAAKuO,SAASpO,KAAK,CAAC8M,EAAMxI,UAAWkJ,GAAQhJ,EAAOA,UAC1B,IAAtBA,EAAO6J,WAAkB,CAC3B,MAAM1F,EAAO8E,GAAQjJ,EAAO8J,SAAS,IACrCzO,KAAKmO,IAAM,IAAIJ,EAAS/N,KAAKmO,IAAIO,YAAYC,OAAO,CAAC7F,KACrD9I,KAAKkJ,aAAa,CAChBC,WAAYyE,GAAQjJ,EAAO8J,SAAS,IACpChK,UAAWwI,EAAMxI,UACjB2E,MAAO,CACLoE,SAAUG,GAAQhJ,EAAOA,eAGxB,CACL,MAAMiK,EAlGZ,SAAwBjK,GACtB,MAAMkK,EAAW,IAAI3N,WAAWyD,GAChC,IAAI2I,EAAM,GACV,IAAK,MAAMwB,KAAYD,EACrBvB,GAAOyB,OAAOC,aAAaF,GAE7B,OAAOxB,EA4FY2B,CAAetK,EAAOA,OAAO1C,MAAM,EAAG0C,EAAO6J,WAAa,IAAInI,MAAM,KAAKT,IAAKY,GAAMqB,SAASrB,EAAG,IAAM,OAC/GtH,EAAO,IAAIV,EAAWoQ,EAAO,GAAIA,EAAO,GAAIA,EAAO,GAAIA,EAAO,IAEpE5O,KAAKoO,YAAclP,EAAKmG,QAEnBrF,KAAKoD,kBACRpD,KAAKoD,gBAAkBlE,EAAKmG,QAAQC,WAGtC,MAAM4J,EAAahQ,EAAKmG,QAAQE,SAASvF,KAAKoD,gBAAiBiC,SAC/D6J,EAAWjR,GAAKiR,EAAWjR,EAE3B+B,KAAKsO,WAAWa,MAAMD,EAAY,IAClClP,KAAKqO,YAAYe,cAAcpP,KAAKsO,WAAYe,IAEhD,MAAMrR,EAAEA,EAACC,EAAEA,EAACC,EAAEA,EAACc,EAAEA,GAAMgB,KAAKqO,YAC5BrO,KAAKwJ,oBAAoB,CACvBvK,WAAY,CAAEjB,EAAAA,EAAGC,EAAAA,EAAGC,EAAAA,EAAGc,EAAAA,GACvByF,UAAWwI,EAAMxI,cAMzB,MAAM4K,GAAoB,GC/IpBC,GAAM7H,EAAQ,eAEP8H,uBAAuBxP,gBAGlClB,YAAYqO,GACV3F,QAHKvH,YAAkB,IAAIwH,EAAQ8H,IAKnCpC,EAAOP,iBAAiB,UAAW3M,KAAKwP,UAAUhH,KAAKxI,OAGlDnB,OACL,MAAO,iBAGIA,oDACX,OAAOmB,KAAKyP,OAAOnG,SAGbzK,UAAU6Q,GAChB,GAAIA,EAAEC,QAAUD,EAAEE,SAAWF,EAAEG,SAAWH,EAAEI,SAC1C,OAGF,MAAMhH,EAAOiH,EAAUL,GACnB5G,IACF9I,KAAKyP,OAAOxG,eAAeH,GAC3B9I,KAAKkJ,aAAa,CAChBC,WAAYL,EACZrE,UAAWiL,EAAEjL,UACb6E,MAAOtJ,KAAKyP,OAAOnG,QAErBoG,EAAEM,4BAMcC,GAAqB/C,EAActL,iDACvD,OAAO,IAAI2N,eAAerC,MCE5B,IAAIgD,GAAsB,WAIJC,GAAQC,EAAmC,6CAE/D,IAAIrI,EADJlH,EAAS,uBAET,IACE,IAAIwP,EAAmBD,EAAQC,kBAC1BA,GAAoBH,IARmB,IAS1CxQ,QAAQqB,KAAK,2HACbsP,GAAmB,GAErBtI,QAAeuI,UAAUC,UAAUC,cA7CvC,SAAwBH,GAA4B,GAClD,MAAMD,EAAUC,EAAmB,CACjCA,kBAAkB,EAClBlK,iBAAkB,IAChB,CACAF,QAAS,GACTE,iBAAkB,IAEtB,IAAK,MAAMsK,IAAU,CACnBzK,EACA+E,EACA2C,IAEK2C,IACHD,EAAQnK,QAAUmK,EAAQnK,QAAS0I,OAAO8B,EAAOxK,UAEnDmK,EAAQjK,iBAAmBiK,EAAQjK,iBAAiBwI,OAAO8B,EAAOtK,kBAGpE,OADAtF,EAAS,CAAE6P,eAAgBN,IACpBA,EA0B4CM,CAAeL,IAChEH,GAAsB,EACtB,MAAOR,GAEP,MADAQ,KACM,IAAI/R,MAAMuR,GAIlB,GAFA7O,EAAS,UAAWkH,QAEO,IAAhBA,EAAO4I,KAChB,OAAOC,QAAQC,OAAO,sCAGxB,MAAMzJ,QAAeW,EAAO4I,KAAKR,UACjCtP,EAAS,UAAWuG,GAEpB,MAAMpF,EAAOoF,EAAOW,OAAQ/F,MAAQ,GAGpC,OAAIA,GAAQA,EAAK2F,WAAW,aACbT,QAAQiJ,QAAQ/I,GACpBpF,GAAQA,EAAK2F,WAAW,gBACpBkG,OAAOsC,QAAQ/I,SAEfiF,WAAW8D,QAAQ/I"}