{
  "version": 3,
  "sources": ["../../src/alg/algorithm/block-move.ts", "../../src/alg/operation.ts", "../../src/alg/validation.ts", "../../src/alg/url.ts"],
  "sourcesContent": ["import { Move } from \"./alg-part\";\n\nexport type MoveFamily = string; // TODO: Convert to an enum with string mappings.\n\n// TODO: Rename to `LetterMove`?\nexport class BlockMove extends Move {\n  public type: string = \"blockMove\";\n\n  // If `outerLayer` is set, `innerLayer` must also be set.\n  public outerLayer?: number;\n  public innerLayer?: number;\n  constructor(\n    outerLayer: number | undefined,\n    innerLayer: number | undefined,\n    public family: MoveFamily,\n    public amount: number = 1,\n  ) {\n    super();\n    if (innerLayer) {\n      this.innerLayer = innerLayer;\n      if (outerLayer) {\n        this.outerLayer = outerLayer;\n      }\n    }\n    if (outerLayer && !innerLayer) {\n      throw new Error(\n        \"Attempted to contruct block move with outer layer but no inner layer\",\n      );\n    }\n    Object.freeze(this);\n  }\n}\n\nexport function BareBlockMove(family: MoveFamily, amount?: number): BlockMove {\n  return new BlockMove(undefined, undefined, family, amount);\n}\n\nexport function LayerBlockMove(\n  innerLayer: number,\n  family: MoveFamily,\n  amount?: number,\n): BlockMove {\n  return new BlockMove(undefined, innerLayer, family, amount);\n}\n\nexport function RangeBlockMove(\n  outerLayer: number,\n  innerLayer: number,\n  family: MoveFamily,\n  amount?: number,\n): BlockMove {\n  return new BlockMove(outerLayer, innerLayer, family, amount);\n}\n", "import { BlockMove, Sequence } from \"./algorithm\";\n\nfunction canCoalesce(m1: BlockMove, m2: BlockMove): boolean {\n  return (\n    m1.family === m2.family &&\n    m1.innerLayer === m2.innerLayer &&\n    m1.outerLayer === m2.outerLayer\n  );\n}\n\ninterface BlockMoveModifications {\n  outerLayer?: number;\n  innerLayer?: number;\n  family?: string;\n  amount?: number;\n}\n\nexport function modifiedBlockMove(\n  original: BlockMove,\n  modifications: BlockMoveModifications,\n): BlockMove {\n  // TODO: use the nullish coalescing operator once it becomes available to us.\n  return new BlockMove(\n    modifications.outerLayer ?? original.outerLayer,\n    modifications.innerLayer ?? original.innerLayer,\n    modifications.family ?? original.family,\n    modifications.amount ?? original.amount,\n  );\n}\n\nexport function experimentalAppendBlockMove(\n  s: Sequence,\n  newMove: BlockMove,\n  coalesceLastMove: boolean = false,\n  mod: number = 0,\n): Sequence {\n  const oldNestedUnits = s.nestedUnits;\n  const oldLastMove = oldNestedUnits[\n    oldNestedUnits.length - 1\n  ] as BlockMove | null;\n  if (coalesceLastMove && oldLastMove && canCoalesce(oldLastMove, newMove)) {\n    const newNestedUnits = s.nestedUnits.slice(0, oldNestedUnits.length - 1);\n    let newAmount = oldLastMove.amount + newMove.amount;\n    if (mod > 1) {\n      newAmount = ((newAmount % mod) + mod) % mod;\n      if (newAmount * 2 > mod) {\n        newAmount -= mod;\n      }\n    }\n    if (newAmount !== 0) {\n      newNestedUnits.push(\n        modifiedBlockMove(oldLastMove, { amount: newAmount }),\n      );\n    }\n    return new Sequence(newNestedUnits);\n  } else {\n    return new Sequence([...oldNestedUnits, newMove]);\n  }\n}\n\n// This purposely takes sequences as individual arguments, instead of a lsit of sequences, because:\n//\n// 1. This matches Javascript's built-in `Array.concat()` functionality.\n// 2. It encourages avoiding lists of sequences (which might lead to coding mistakes).\n//\n// TODO: Now useful is it to coalesce at alg boundaries (rather than coalescing the whole result)?\n// Should that be a separate function, or should we change this to accept coalescing option arg like `experimentalAppendBlockMove()`?\nexport function experimentalConcatAlgs(...args: Sequence[]): Sequence {\n  return new Sequence(\n    Array.prototype.concat.apply(\n      [],\n      [...args].map((s) => s.nestedUnits),\n    ),\n  );\n}\n", "import {\n  BlockMove,\n  Comment,\n  Commutator,\n  Conjugate,\n  Group,\n  NewLine,\n  Pause,\n  Sequence,\n} from \"./algorithm\";\n\nimport { TraversalUp } from \"./traversal\";\n\nexport class ValidationError extends Error {}\n\nexport abstract class ValidatorTraversal extends TraversalUp<void> {}\n\ninterface FamilyList {\n  [s: string]: boolean;\n}\n\nfunction validateFamily(\n  family: string,\n  allowedFamilyLists: FamilyList[],\n): boolean {\n  for (const list of allowedFamilyLists) {\n    if (list[family] === true) {\n      return true;\n    }\n  }\n  return false;\n}\n\n// TODO: Switch to `Set`?\nconst plainMoveFamilies: FamilyList = {\n  x: true,\n  y: true,\n  z: true,\n  M: true,\n  E: true,\n  S: true,\n  m: true,\n  e: true,\n  s: true,\n};\n\nconst singleSliceMoveFamilies: FamilyList = {\n  U: true,\n  L: true,\n  F: true,\n  R: true,\n  B: true,\n  D: true,\n};\n\nconst wideMoveFamilies: FamilyList = {\n  u: true,\n  l: true,\n  f: true,\n  r: true,\n  b: true,\n  d: true,\n  Uw: true,\n  Lw: true,\n  Fw: true,\n  Rw: true,\n  Bw: true,\n  Dw: true,\n};\n\nabstract class BaseMoveValidator extends ValidatorTraversal {\n  public traverseSequence(sequence: Sequence): void {\n    // TODO: Handle newLines and comments correctly\n    for (const unit of sequence.nestedUnits) {\n      this.traverse(unit);\n    }\n  }\n\n  public traverseGroup(group: Group): void {\n    return this.traverse(group.nestedSequence);\n  }\n\n  public traverseCommutator(commutator: Commutator): void {\n    this.traverse(commutator.A);\n    this.traverse(commutator.B);\n  }\n\n  public traverseConjugate(conjugate: Conjugate): void {\n    this.traverse(conjugate.A);\n    this.traverse(conjugate.B);\n  }\n\n  public traversePause(_pause: Pause): void {\n    return;\n  }\n\n  public traverseNewLine(_newLine: NewLine): void {\n    return;\n  }\n\n  public traverseComment(_comment: Comment): void {\n    return;\n  }\n}\n\n// TODO: Export function instead?\nexport class BlockMoveValidator extends BaseMoveValidator {\n  public traverseBlockMove(blockMove: BlockMove): void {\n    if (typeof blockMove.outerLayer !== \"undefined\") {\n      if (typeof blockMove.innerLayer === \"undefined\") {\n        throw new ValidationError(\n          \"A BlockMove with an outer layer must have an inner layer.\",\n        );\n      }\n      if (!validateFamily(blockMove.family, [wideMoveFamilies])) {\n        throw new ValidationError(\n          `The provided SiGN move family is invalid, or cannot have an outer and inner layer: ${blockMove.family}`,\n        );\n      }\n      if (blockMove.outerLayer <= 0) {\n        throw new ValidationError(\"Cannot have an outer layer of 0 or less.\");\n      }\n      // TODO: Allow 2-2r?\n      if (blockMove.outerLayer >= blockMove.innerLayer) {\n        throw new ValidationError(\n          \"The outer layer must be less than the inner layer.\",\n        );\n      }\n      return;\n    } else if (typeof blockMove.innerLayer !== \"undefined\") {\n      if (\n        !validateFamily(blockMove.family, [\n          wideMoveFamilies,\n          singleSliceMoveFamilies,\n        ])\n      ) {\n        throw new ValidationError(\n          `The provided SiGN move family is invalid, or cannot have an inner slice: ${blockMove.family}`,\n        );\n      }\n      if (blockMove.innerLayer <= 0) {\n        throw new ValidationError(\"Cannot have an inner layer of 0 or less.\");\n      }\n      return;\n    } else {\n      if (\n        !validateFamily(blockMove.family, [\n          wideMoveFamilies,\n          singleSliceMoveFamilies,\n          plainMoveFamilies,\n        ])\n      ) {\n        throw new ValidationError(\n          `Invalid SiGN plain move family: ${blockMove.family}`,\n        );\n      }\n      return;\n    }\n  }\n}\n\n// TODO: Export function instead?\nexport class FlatAlgValidator extends ValidatorTraversal {\n  public traverseSequence(sequence: Sequence): void {\n    // TODO: Handle newLines and comments correctly\n    for (const unit of sequence.nestedUnits) {\n      this.traverse(unit);\n    }\n    return;\n  }\n\n  public traverseGroup(_group: Group): void {\n    throw new ValidationError(\"A flat alg cannot contain a group.\");\n  }\n\n  public traverseBlockMove(_blockMove: BlockMove): void {\n    return;\n  }\n\n  public traverseCommutator(_commutator: Commutator): void {\n    throw new ValidationError(\"A flat alg cannot contain a commutator.\");\n  }\n\n  public traverseConjugate(_conjugate: Conjugate): void {\n    throw new ValidationError(\"A flat alg cannot contain a conjugate.\");\n  }\n\n  public traversePause(_pause: Pause): void {\n    return;\n  }\n\n  public traverseNewLine(_newLine: NewLine): void {\n    return;\n  }\n\n  public traverseComment(_comment: Comment): void {\n    return;\n  }\n}\n\nexport type Validator = (a: Sequence) => void;\n\nconst BlockMoveValidatorInstance = new BlockMoveValidator();\nexport const validateSiGNMoves = BlockMoveValidatorInstance.traverse.bind(\n  BlockMoveValidatorInstance,\n) as Validator;\n\nconst flatAlgValidatorInstance = new FlatAlgValidator();\nexport const validateFlatAlg = flatAlgValidatorInstance.traverse.bind(\n  flatAlgValidatorInstance,\n) as Validator;\n\n// TODO: Option for puzzle size?\nexport function validateSiGNAlg(a: Sequence): void {\n  validateSiGNMoves(a);\n  validateFlatAlg(a);\n}\n", "import { Sequence } from \"./algorithm\";\nimport { parse } from \"./parser\";\nimport { algToString } from \"./traversal\";\n\n// This is not the most sophisticated scheme, but it has been used in production\n// at alg.cubing.net for years.\nexport function serializeURLParam(a: Sequence): string {\n  let escaped = algToString(a);\n  escaped = escaped.replace(/_/g, \"&#95;\").replace(/ /g, \"_\");\n  escaped = escaped.replace(/\\+/g, \"&#2b;\");\n  escaped = escaped.replace(/-/g, \"&#45;\").replace(/'/g, \"-\");\n  return escaped;\n}\n\nexport function deserializeURLParam(a: string): Sequence {\n  let unescaped = a;\n  unescaped = unescaped.replace(/-/g, \"'\").replace(/&#45;/g, \"-\");\n  unescaped = unescaped.replace(/\\+/g, \" \").replace(/&#2b;/g, \"+\"); // Recognize + as space. Many URL encodings will do this.\n  unescaped = unescaped.replace(/_/g, \" \").replace(/&#95;/g, \"_\");\n  return parse(unescaped);\n}\n\n// Returns an empty sequence if the parameter is not present.\n// Throws an error if an alg is present but not valid.\nexport function getAlgURLParam(name: string): Sequence {\n  const s = new URLSearchParams(window.location.search).get(name) || \"\";\n  return deserializeURLParam(s);\n}\n\nexport interface AlgCubingNetOptions {\n  alg?: Sequence;\n  setup?: Sequence;\n  title?: string;\n  puzzle?:\n    | \"1x1x1\"\n    | \"2x2x2\"\n    | \"3x3x3\"\n    | \"4x4x4\"\n    | \"5x5x5\"\n    | \"6x6x6\"\n    | \"7x7x7\"\n    | \"8x8x8\"\n    | \"9x9x9\"\n    | \"10x10x10\"\n    | \"11x11x11\"\n    | \"12x12x12\"\n    | \"13x13x13\"\n    | \"14x14x14\"\n    | \"16x16x16\"\n    | \"17x17x17\";\n  stage?:\n    | \"full\"\n    | \"cross\"\n    | \"F2L\"\n    | \"LL\"\n    | \"OLL\"\n    | \"PLL\"\n    | \"CLS\"\n    | \"ELS\"\n    | \"L6E\"\n    | \"CMLL\"\n    | \"WV\"\n    | \"ZBLL\"\n    | \"void\";\n  view?: \"editor\" | \"playback\" | \"fullscreen\";\n  type?: \"moves\" | \"reconstruction\" | \"alg\" | \"reconstruction-end-with-setup\";\n}\n\n// TODO: runtime validation?\nexport function algCubingNetLink(options: AlgCubingNetOptions): string {\n  const url = new URL(\"https://alg.cubing.net\");\n  if (!options.alg) {\n    throw new Error(\"An alg parameter is required.\");\n  }\n  url.searchParams.set(\"alg\", serializeURLParam(options.alg));\n\n  if (options.setup) {\n    url.searchParams.set(\"setup\", serializeURLParam(options.setup));\n  }\n  if (options.title) {\n    url.searchParams.set(\"title\", options.title);\n  }\n  if (options.puzzle) {\n    if (\n      ![\n        \"1x1x1\",\n        \"2x2x2\",\n        \"3x3x3\",\n        \"4x4x4\",\n        \"5x5x5\",\n        \"6x6x6\",\n        \"7x7x7\",\n        \"8x8x8\",\n        \"9x9x9\",\n        \"10x10x10\",\n        \"11x11x11\",\n        \"12x12x12\",\n        \"13x13x13\",\n        \"14x14x14\",\n        \"16x16x16\",\n        \"17x17x17\",\n      ].includes(options.puzzle)\n    ) {\n      throw new Error(`Invalid puzzle parameter: ${options.puzzle}`);\n    }\n    url.searchParams.set(\"puzzle\", options.puzzle);\n  }\n  if (options.stage) {\n    if (\n      ![\n        \"full\",\n        \"cross\",\n        \"F2L\",\n        \"LL\",\n        \"OLL\",\n        \"PLL\",\n        \"CLS\",\n        \"ELS\",\n        \"L6E\",\n        \"CMLL\",\n        \"WV\",\n        \"ZBLL\",\n        \"void\",\n      ].includes(options.stage)\n    ) {\n      throw new Error(`Invalid stage parameter: ${options.stage}`);\n    }\n    url.searchParams.set(\"stage\", options.stage);\n  }\n  if (options.view) {\n    if (![\"editor\", \"playback\", \"fullscreen\"].includes(options.view)) {\n      throw new Error(`Invalid view parameter: ${options.view}`);\n    }\n    url.searchParams.set(\"view\", options.view);\n  }\n  if (options.type) {\n    if (\n      ![\n        \"moves\",\n        \"reconstruction\",\n        \"alg\",\n        \"reconstruction-end-with-setup\",\n      ].includes(options.type)\n    ) {\n      throw new Error(`Invalid type parameter: ${options.type}`);\n    }\n    url.searchParams.set(\"type\", options.type);\n  }\n  return url.toString();\n}\n"],
  "mappings": ";;;;;;;;;;;;AAqCO,wBACL;AAIA,SAAO,IAAI,UAAU,QAAW,YAAY,QAAQ;AAAA;AAG/C;AAML,SAAO,IAAI,UAAU,YAAY,YAAY,QAAQ;AAAA;;;ACgBhD,mCAAmC;AACxC,SAAO,IAAI,SACT,MAAM,UAAU,OAAO,MACrB,IACA,CAAC,GAAG,MAAM,IAAI,OAAO,EAAE;AAAA;;;AC8ItB,yBAAyB;AAC9B,oBAAkB;AAClB,kBAAgB;AAAA;;;ACjNX,2BAA2B;AAChC,gBAAc,YAAY;AAC1B,YAAU,QAAQ,QAAQ,MAAM,SAAS,QAAQ,MAAM;AACvD,YAAU,QAAQ,QAAQ,OAAO;AACjC,YAAU,QAAQ,QAAQ,MAAM,SAAS,QAAQ,MAAM;AACvD,SAAO;AAAA;AAGF;AACL,kBAAgB;AAChB,cAAY,UAAU,QAAQ,MAAM,KAAK,QAAQ,UAAU;AAC3D,cAAY,UAAU,QAAQ,OAAO,KAAK,QAAQ,UAAU;AAC5D,cAAY,UAAU,QAAQ,MAAM,KAAK,QAAQ,UAAU;AAC3D,SAAO,MAAM;AAAA;AAKR;AACL,YAAU,IAAI,gBAAgB,OAAO,SAAS,QAAQ,IAAI,SAAS;AACnE,SAAO,oBAAoB;AAAA;AA2CtB;AACL,cAAY,IAAI,IAAI;AACpB,MAAI,CAAC,QAAQ;AACX,UAAM,IAAI,MAAM;AAAA;AAElB,MAAI,aAAa,IAAI,OAAO,kBAAkB,QAAQ;AAEtD,MAAI,QAAQ;AACV,QAAI,aAAa,IAAI,SAAS,kBAAkB,QAAQ;AAAA;AAE1D,MAAI,QAAQ;AACV,QAAI,aAAa,IAAI,SAAS,QAAQ;AAAA;AAExC,MAAI,QAAQ;AACV,QACE,CAAC;AAAA,MACC;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA,SAAS,QAAQ;AAEnB,YAAM,IAAI,MAAM,6BAA6B,QAAQ;AAAA;AAEvD,QAAI,aAAa,IAAI,UAAU,QAAQ;AAAA;AAEzC,MAAI,QAAQ;AACV,QACE,CAAC;AAAA,MACC;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA,SAAS,QAAQ;AAEnB,YAAM,IAAI,MAAM,4BAA4B,QAAQ;AAAA;AAEtD,QAAI,aAAa,IAAI,SAAS,QAAQ;AAAA;AAExC,MAAI,QAAQ;AACV,QAAI,CAAC,CAAC,UAAU,YAAY,cAAc,SAAS,QAAQ;AACzD,YAAM,IAAI,MAAM,2BAA2B,QAAQ;AAAA;AAErD,QAAI,aAAa,IAAI,QAAQ,QAAQ;AAAA;AAEvC,MAAI,QAAQ;AACV,QACE,CAAC;AAAA,MACC;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA,SAAS,QAAQ;AAEnB,YAAM,IAAI,MAAM,2BAA2B,QAAQ;AAAA;AAErD,QAAI,aAAa,IAAI,QAAQ,QAAQ;AAAA;AAEvC,SAAO,IAAI;AAAA;",
  "names": []
}
