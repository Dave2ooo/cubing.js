{
  "name": "cubing",
  "version": "0.18.7",
  "description": "A collection of Javascript cubing libraries.",
  "author": "The js.cubing.net team",
  "type": "module",
  "types": "dist/types/index.d.ts",
  "license": "GPL-3.0-or-later",
  "repository": "github:cubing/cubing.js",
  "dependencies": {
    "@types/three": "^0.126.1",
    "@types/web-bluetooth": "0.0.4",
    "comlink": "^4.3.1",
    "three": "^0.126.1"
  },
  "devDependencies": {
    "@babel/preset-env": "^7.11.5",
    "@babel/preset-typescript": "^7.13.0",
    "@babylonjs/core": "^5.0.0-alpha.24",
    "@snowpack/plugin-typescript": "^1.2.1",
    "@types/jest": "^26.0.23",
    "@typescript-eslint/eslint-plugin": "^4.17.0",
    "@typescript-eslint/parser": "^4.17.0",
    "babel-jest": "^26.6.3",
    "esbuild": "^0.12.9",
    "eslint": "^7.21.0",
    "eslint-config-prettier": "^8.1.0",
    "eslint-plugin-html": "^6.1.0",
    "eslint-plugin-prettier": "^3.3.1",
    "jest": "^27.0.5",
    "jszip": "^3.5.0",
    "peggy": "^1.1.0",
    "prettier": "^2.2.1",
    "puppeteer": "^8.0.0",
    "snowpack": "^3.8.0-pre.0",
    "ts-jest": "^27.0.3",
    "typescript": "^4.3.2",
    "yargs": "^16.2.0"
  },
  "scripts": {
    "build": "npm run clean && node ./script/build.js all",
    "build-esm": "node ./script/build.js esm",
    "build-bundle-global": "node ./script/build.js bundle-global",
    "build-types": "node ./script/build.js types",
    "build-bin": "node ./script/build.js bin",
    "build-experiments": "node ./script/build.js snowpack",
    "build-solve-worker": "node ./script/build.js solve-worker",
    "generate-js": "npm run generate-js-parsers && npm run generate-js-svg",
    "generate-js-parsers": "npx peggy --format es src/cubing/kpuzzle/parser/parser-peggy.peggy",
    "generate-js-svg": "echo \"TODO: Generating JS for SVGs is not implemented yet.\"",
    "dev": "node ./script/build.js snowpack dev",
    "clean": "rm -rf dist .cache .parcel-cache coverage .rpt2_cache /tmp/cubing-js-parcel src/cubing/solve/worker-inside-generated* script/dist-test/parcel-test/parcel-package/.parcel-cache script/dist-test/parcel-test/parcel-package/dist script/dist-test/parcel-test/parcel-package/node_modules",
    "test": "npm run test-jest && npm run lint && npm run test-import-restrictions && npm run test-tsc # keep test.yml in sync with this",
    "test-dist-parcel": "node ./script/dist-test/parcel-test/parcel-test.js",
    "test-experiments": "node ./script/test-experiments/test.js",
    "test-import-restrictions": "node ./script/import-restrictions/build.js",
    "test-jest": "npx jest --collectCoverage",
    "test-node-import": "node script/dist-test/import.mjs",
    "test-tsc": "npm run build-types && npx tsc --build ./tsconfig.json",
    "test-dist-perf": "node script/dist-test/perf/*.mjs",
    "format": "npx eslint --fix --ext=js,ts .; npx prettier --write src */index.d.ts",
    "setup": "npm install",
    "lint": "npx eslint --ext=js,ts .",
    "prepack": "npm run clean && npm run build && npm run test-node-import",
    "parcel-build-for-twizzle-net": "echo \"parcel-build-for-twizzle-net is currently unimplemented.\""
  },
  "targets": {
    "twizzle-net": {},
    "experiments-cubing-net": {}
  },
  "keywords": [
    "cubing",
    "speedcubing",
    "puzzle",
    "visualization",
    "kpuzzle",
    "cuble",
    "bluetooth",
    "rubik",
    "rubik's"
  ],
  "eslintConfig": {
    "root": true,
    "parserOptions": {
      "project": "./tsconfig-eslint.json",
      "extraFileExtensions": [
        ".cjs",
        ".mjs"
      ]
    },
    "parser": "@typescript-eslint/parser",
    "plugins": [
      "@typescript-eslint"
    ],
    "rules": {
      "@typescript-eslint/no-inferrable-types": "off",
      "@typescript-eslint/no-use-before-define": "off",
      "@typescript-eslint/no-explicit-any": "off",
      "@typescript-eslint/no-unused-vars": "off",
      "@typescript-eslint/no-unused-vars-experimental": "error",
      "@typescript-eslint/no-non-null-assertion": "off",
      "eqeqeq": "error",
      "quote-props": [
        "error",
        "consistent-as-needed"
      ],
      "lines-between-class-members": [
        "error",
        "always",
        {
          "exceptAfterSingleLine": true
        }
      ]
    },
    "ignorePatterns": [
      "/coverage",
      "/dist",
      "/src/dist-static",
      "/snowpack.config.mjs",
      "/src/cubing/solve/vendor/implementations/3x3x3/min2phase/gwt.js",
      "/src/cubing/solve/vendor/implementations/vendor/random-uint-below/get-random-values.d.ts",
      "/src/cubing/solve/worker-inside-generated*",
      "parser-peggy.js"
    ],
    "env": {
      "commonjs": true,
      "browser": true,
      "node": true
    }
  },
  "prettier": {
    "semi": true,
    "trailingComma": "all",
    "tabWidth": 2,
    "quoteProps": "consistent"
  },
  "exports": {
    ".": {
      "import": "./index.js",
      "types": "./types/types/index.d.ts"
    },
    "./alg": {
      "import": "./dist/esm/alg/index.js",
      "types": "./dist/types/alg/index.d.ts"
    },
    "./bluetooth": {
      "import": "./dist/esm/bluetooth/index.js",
      "types": "./dist/types/bluetooth/index.d.ts"
    },
    "./kpuzzle": {
      "import": "./dist/esm/kpuzzle/index.js",
      "types": "./dist/types/kpuzzle/index.d.ts"
    },
    "./notation": {
      "import": "./dist/esm/notation/index.js",
      "types": "./dist/types/notation/index.d.ts"
    },
    "./protocol": {
      "import": "./dist/esm/protocol/index.js",
      "types": "./dist/types/protocol/index.d.ts"
    },
    "./puzzle-geometry": {
      "import": "./dist/esm/puzzle-geometry/index.js",
      "types": "./dist/esm/types/puzzle-geometry/index.d.ts"
    },
    "./puzzles": {
      "import": "./dist/esm/puzzles/index.js",
      "types": "./dist/esm/types-geometry/index.d.ts"
    },
    "./scramble": {
      "import": "./dist/esm/scramble/index.js",
      "types": "./dist/types/scramble/index.d.ts"
    },
    "./solve": {
      "import": "./dist/esm/solve/index.js",
      "types": "./dist/types/solve/index.d.ts"
    },
    "./stream": {
      "import": "./dist/esm/stream/index.js",
      "types": "./dist/types/stream/index.d.ts"
    },
    "./twisty": {
      "import": "./dist/esm/twisty/index.js",
      "types": "./dist/types/twisty/index.d.ts"
    }
  },
  "babel": {
    "presets": [
      [
        "@babel/preset-env",
        {
          "targets": {
            "node": "current"
          }
        }
      ],
      "@babel/preset-typescript"
    ]
  },
  "jest": {
    "roots": [
      "<rootDir>/src",
      "<rootDir>/script"
    ],
    "modulePathIgnorePatterns": [
      "<rootDir>/script/test-experiments/"
    ]
  },
  "files": [
    "/LICENSE.md",
    "/README.md",
    "/package.json",
    "/package-lock.json",
    "/dist/**/*",
    "/src/cubing/**/*",
    "/docs/**/*",
    "/*/package.json",
    "/*/index.d.ts"
  ]
}
