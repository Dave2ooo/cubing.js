{
  "version": 3,
  "sources": ["../../src/js/api.ts", "../../src/js/serialize.ts"],
  "sourcesContent": ["// TODO: Worker\nimport { Alg } from \"cubing/alg\";\n\ntype CWrap = (fn: string, returnType: string, argType: string[]) => any;\n\ninterface EmscriptenModule {\n  cwrap: CWrap;\n}\n\nasync function importOnce(): Promise<EmscriptenModule> {\n  const fn = (await import(\"../../build/wasm-single-file/twsearch.mjs\"))\n    .default;\n  return await fn();\n}\n\nlet cachedEmscriptenModule: null | Promise<EmscriptenModule> = null;\nasync function emscriptenModule(): Promise<EmscriptenModule> {\n  return (cachedEmscriptenModule ??= importOnce());\n}\n\nfunction cwrap(\n  fn: string,\n  returnType: string,\n  argTypes: string[],\n  processReturnValue: (v: any) => any = (v) => v,\n): (...args: any[]) => Promise<any> {\n  const wrapped = (async () =>\n    (await emscriptenModule()).cwrap(fn, returnType, argTypes))();\n  return async (...args: any[]) => {\n    return processReturnValue((await wrapped)(...args));\n  };\n}\n\nconst stringArg = [\"string\"];\nexport const setArgs: (s: string) => Promise<void> = cwrap(\n  \"w_args\",\n  \"void\",\n  stringArg,\n);\nexport const setKPuzzleDefString: (s: string) => Promise<void> = cwrap(\n  \"w_setksolve\",\n  \"void\",\n  stringArg,\n);\nexport const solveScramble: (s: string) => Promise<Alg> = cwrap(\n  \"w_solvescramble\",\n  \"string\",\n  stringArg,\n  Alg.fromString,\n);\nexport const solveState: (s: string) => Promise<Alg> = cwrap(\n  \"w_solveposition\",\n  \"string\",\n  stringArg,\n  Alg.fromString,\n);\n", "import type { KPuzzle, KTransformationData } from \"cubing/kpuzzle\";\n\nconst BLANK_LINE = \"\";\nconst END = \"End\";\n\nfunction sanitize(s: string): string {\n  // @ts-ignore\n  return s.replaceAll(/[^A-Za-z0-9]/g, \"_\");\n}\n\nexport function serializeKTransformationDataToTws(\n  name: string,\n  t: KTransformationData,\n  forScramble: boolean = false,\n): string {\n  const outputLines: string[] = [];\n  outputLines.push(\n    `${forScramble ? \"ScrambleState\" : \"MoveTransformation\"} ${sanitize(name)}`,\n  );\n  // outputLines.push(sanitize());\n  for (const [orbitName, orbitData] of Object.entries(t)) {\n    outputLines.push(sanitize(orbitName));\n    outputLines.push(orbitData.permutation.join(\" \"));\n    outputLines.push(orbitData.orientation.join(\" \"));\n  }\n  outputLines.push(END);\n  outputLines.push(BLANK_LINE);\n  return outputLines.join(\"\\n\");\n}\n\nexport function serializeDefToTws(\n  kpuzzle: KPuzzle,\n  options?: { moveSubset?: string[]; startState?: string },\n): string {\n  let outputLines: string[] = [];\n  const def = kpuzzle.definition;\n\n  outputLines.push(`Name ${sanitize(def.name ?? \"CustomPuzzle\")}`);\n  outputLines.push(BLANK_LINE);\n\n  for (const [orbitName, orbitInfo] of Object.entries(def.orbits)) {\n    outputLines.push(\n      `Set ${sanitize(orbitName)} ${orbitInfo.numPieces} ${\n        orbitInfo.numOrientations\n      }`,\n    );\n  }\n  outputLines.push(BLANK_LINE);\n\n  outputLines.push(\"StartState\");\n  if (options?.startState) {\n    outputLines.push(options?.startState);\n  } else {\n    for (const [orbitName, orbitDef] of Object.entries(def.startStateData)) {\n      outputLines.push(sanitize(orbitName));\n      outputLines.push(orbitDef.pieces.join(\" \"));\n      outputLines.push(orbitDef.orientation.join(\" \"));\n    }\n  }\n  outputLines.push(END);\n  outputLines.push(BLANK_LINE);\n\n  function include(moveName): boolean {\n    if (options?.moveSubset) {\n      return options.moveSubset.includes(moveName);\n    } else {\n      return true;\n    }\n  }\n\n  for (const [moveName, moveDef] of Object.entries(def.moves)) {\n    // console.log(moveName, include(moveName))\n    if (include(moveName)) {\n      outputLines.push(serializeKTransformationDataToTws(moveName, moveDef));\n    }\n  }\n  // console.log(def.experimentalDerivedMoves)\n  for (const [moveName, moveAlgDef] of Object.entries(\n    def.experimentalDerivedMoves ?? {},\n  )) {\n    // console.log(moveName, include(moveName))\n    if (include(moveName)) {\n      const transformation = kpuzzle.algToTransformation(moveAlgDef);\n      outputLines.push(\n        serializeKTransformationDataToTws(\n          moveName,\n          transformation.transformationData,\n        ),\n      );\n    }\n  }\n\n  return outputLines.join(\"\\n\");\n}\n"],
  "mappings": "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",
  "names": []
}
